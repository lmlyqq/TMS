package com.rd.client.view.base;

import com.rd.client.PanelFactory;
import com.rd.client.common.util.Util;
import com.rd.client.common.widgets.SGPanel;
import com.rd.client.common.widgets.SGText;
import com.smartgwt.client.data.Criteria;
import com.smartgwt.client.data.DSRequest;
import com.smartgwt.client.data.DSResponse;
import com.smartgwt.client.data.OperationBinding;
import com.smartgwt.client.data.RestDataSource;
import com.smartgwt.client.data.fields.DataSourceTextField;
import com.smartgwt.client.types.DSDataFormat;
import com.smartgwt.client.types.DSOperationType;
import com.smartgwt.client.types.DSProtocol;
import com.smartgwt.client.widgets.Canvas;
import com.smartgwt.client.widgets.grid.ListGrid;
import com.smartgwt.client.widgets.grid.ListGridRecord;
import com.smartgwt.client.widgets.layout.VLayout;

public class RestfulDataSourceSample extends ShowcasePanel {

    private static final String DESCRIPTION = "<p>The RestDataSource provides a simple protocol based on XML or JSON over HTTP.</p>" +
            "<p>This protocol can be implemented with any server technology (PHP, Ruby, ..) and includes all the features of Smart GWT's databinding " +
            "layer (data paging, server validation errors, cache sync, etc).</p>" +
            "<p>In this example, each DataSource operation is directed to a different XML file containing a sample response for that operationType. " +
            "The server returns the data-as-saved to allow the grid to update its cache.</p>";

    public static class Factory implements PanelFactory {
        private String id;

        public Canvas create() {
            RestfulDataSourceSample panel = new RestfulDataSourceSample();
            id = panel.getID();
            return panel;
        }

        public String getID() {
            return id;
        }

        public String getDescription() {
            return DESCRIPTION;
        }

		@Override
		public Canvas createCanvas(String id) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public String getCanvasID() {
			// TODO Auto-generated method stub
			return null;
		}
    }

    public Canvas getViewPanel() {

        VLayout layout = new VLayout(15);
        layout.setAutoHeight();
        
        SGPanel searchForm = new SGPanel();
        createSerchForm(searchForm);

      //--------------------
		//overrides here are for illustration purposes only   
        RestDataSource areaDS = new RestDataSource() {  
            @Override  
            protected Object transformRequest(DSRequest dsRequest) {  
                return super.transformRequest(dsRequest);  
            }  
            @Override  
            protected void transformResponse(DSResponse response, DSRequest request, Object data) {  
                super.transformResponse(response, request, data);  
            }  
        };  
        // These lines are not required for this sample to work, but they demonstrate how you can configure RestDataSource   
        // with OperationBindings in order to control settings such as whether to use the GET, POST or PUT HTTP methods,  
        // and whether to send data as URL parameters vs as posted JSON or XML messages.  
        OperationBinding fetch = new OperationBinding();  
        fetch.setOperationType(DSOperationType.FETCH);  
        fetch.setDataProtocol(DSProtocol.POSTPARAMS);  
        OperationBinding add = new OperationBinding();  
        add.setOperationType(DSOperationType.ADD);  
        add.setDataProtocol(DSProtocol.POSTMESSAGE);  
        OperationBinding update = new OperationBinding();  
        update.setOperationType(DSOperationType.UPDATE);  
        update.setDataProtocol(DSProtocol.POSTMESSAGE);  
        OperationBinding remove = new OperationBinding();  
        remove.setOperationType(DSOperationType.REMOVE);  
        remove.setDataProtocol(DSProtocol.POSTMESSAGE);  
        areaDS.setOperationBindings(fetch, update, add, remove);  
  
        //areaDS.setID("BAS_AREA1");
        areaDS.setDataFormat(DSDataFormat.JSON);
        
        DataSourceTextField keyField = new DataSourceTextField("AREA_CODE");
        keyField.setPrimaryKey(true);
        keyField.setRequired(true);
        keyField.setHidden(true);
        
        DataSourceTextField parentIdField = new DataSourceTextField("PARENT_AREA_ID", Util.TI18N.PARENT_ORG_NAME());
        parentIdField.setForeignKey("AREA_CODE");
        //parentIdField.setRequired(true);
        parentIdField.setHidden(false);
        parentIdField.setRootValue(1);
        
        DataSourceTextField SHORT_NAME = new DataSourceTextField("SHORT_NAME", Util.TI18N.SHORT_NAME(), 90);
        SHORT_NAME.setRequired(true);
        
        areaDS.setFields(keyField,SHORT_NAME,parentIdField);
        
        areaDS.setFetchDataURL("/grss/db/sto?_BCK=ENABLE_FLAG&_FNK=ID&_TN=BAS_AREA");  
        areaDS.setAddDataURL("/grss/db/sto?_BCK=ENABLE_FLAG&_FNK=ID&_TN=BAS_AREA");  
        areaDS.setUpdateDataURL("/grss/db/sto?_BCK=ENABLE_FLAG&_FNK=ID&_TN=BAS_AREA");  
        areaDS.setRemoveDataURL("/grss/db/sto?_BCK=ENABLE_FLAG&_FNK=ID&_TN=BAS_AREA"); 
        //areaDS.setID("BAS_AREA");
        searchForm.setDataSource(areaDS);
		//--------------------


        final ListGrid countryGrid = new ListGrid();
        countryGrid.setWidth(500);
        countryGrid.setHeight(224);
        countryGrid.setDataSource(areaDS);
        countryGrid.setEmptyCellValue("--");


        /*ListGridField codeField = new ListGridField("countryCode");
        ListGridField nameField = new ListGridField("countryName");
        ListGridField capitalField = new ListGridField("capital");
        ListGridField continentField = new ListGridField("continent", "Continent");
        countryGrid.setFields(codeField, nameField, capitalField, continentField);*/
        //countryGrid.setSortField(0);
        //countryGrid.setDataPageSize(50);
        Criteria crit = new Criteria();
        //crit.addCriteria("OP_FLAG","M");
        //crit.addCriteria("CUR_PAGE","2");
        crit.addCriteria("operationType","add");
        crit.addCriteria("tableName","BAS_SKU");
        crit.addCriteria("startRow","0");
        crit.addCriteria("endRow","50");
        crit.addCriteria("PKEY","AREA_CODE");
        //crit.addCriteria("ID","basSku");
        /* Map map = searchForm.getValues();
        Object[] obj = map.keySet().toArray();
        Record record = new Record();
    	for(int i=0; i<obj.length; i++){
    		String key = obj[i].toString();
    		record.setAttribute(key, map.get(key));
    	}
    	countryGrid.fetchData(crit);*/

    	//add
    	/*record = new Record();
    	record.setAttribute("AREA_CODE", "880000");
    	record.setAttribute("AREA_CNAME", "测试区域2");
    	record.setAttribute("ADDWHO", "wpsadmin");
        countryGrid.addData(record);*/
        
    	
        /*Record record_new = new Record();
    	LinkedHashMap<String,LinkedHashMap<String,String>> object2 = new LinkedHashMap<String,LinkedHashMap<String,String>>();
    	LinkedHashMap<String,String> object11 = new LinkedHashMap<String,String>();
    	object11.put("AREA_CODE", "990000");
    	//object11.put("AREA_CNAME", "上海");
    	object2.put("1", object11);
    	//List<HashMap<String, String>> objList = new ArrayList<HashMap<String,String>>();
    	//objList.add(object1);
    	//HashMap<String,String> object2 = new HashMap<String,String>();
    	LinkedHashMap<String,String> object12 = new LinkedHashMap<String,String>();
    	object12.put("AREA_CODE", "950000");  
    	//object12.put("AREA_CNAME", "北京");
    	object2.put("2", object12);
    	
    	LinkedHashMap<String,String> object13 = new LinkedHashMap<String,String>();
    	object13.put("AREA_CODE", "970000");   
    	//object13.put("AREA_CNAME", "深圳"); 
    	object2.put("3", object13);
    	//objList.add(object2);
        record_new.setAttribute("1", object11);
        record_new.setAttribute("2", object12);
        record_new.setAttribute("3", object13);
    	countryGrid.removeData(record_new, new DSCallback() {

			@Override
			public void execute(DSResponse response, Object rawData,
					DSRequest request) {
				if(rawData != null) {
					System.out.println(rawData.toString());
				}
			}
    		
    	});*/
        ListGridRecord record = new ListGridRecord();
        record.setAttribute("AREA_CODE", "990000");
        record.setAttribute("AREA_CNAME", "宁波");
        record.setAttribute("EDITWHO", "wpsadmin");
        countryGrid.updateData(record);
    	
        layout.addMember(searchForm);
        layout.addMember(countryGrid);

        /*HLayout hLayout = new HLayout(15);

        final IButton addButton = new IButton("Add new Country");
        addButton.setWidth(150);
        addButton.addClickHandler(new ClickHandler() {
            public void onClick(ClickEvent event) {
                countryGrid.addData(new CountryRecord("A1", "New Value", "New Value", "New Value"));
                addButton.disable();
            }
        });
        hLayout.addMember(addButton);

        final IButton updateButton = new IButton("Update Country (US)");
        updateButton.setWidth(150);
        updateButton.addClickHandler(new ClickHandler() {
            public void onClick(ClickEvent event) {
                countryGrid.updateData(new CountryRecord("US", "Edited Value", "Edited Value", "Edited Value"));
                updateButton.disable();
            }
        });
        hLayout.addMember(updateButton);

        final IButton removeButton = new IButton("Remove Country (UK)");
        removeButton.setWidth(150);
        removeButton.addClickHandler(new ClickHandler() {
            public void onClick(ClickEvent event) {
                CountryRecord record = new CountryRecord();
                record.setCountryCode("UK");
                countryGrid.removeData(record);
                removeButton.disable();
            }
        });
        hLayout.addMember(removeButton);

        layout.addMember(hLayout);*/

        /*TabSet tabSet = new TabSet();
        tabSet.setHeight(400);
        tabSet.setWidth(500);
        Tab fetchTab = new Tab("country_fetch.xml");
        final HTMLPane fetchPane = new HTMLPane();
        fetchPane.setContentsURL("source/rest/country_fetch_rest.xml.html");
        fetchPane.setContentsType(ContentsType.PAGE);
        fetchTab.setPane(fetchPane);

        Tab addTab = new Tab("country_add.xml");
        final HTMLPane addPane = new HTMLPane();
        addPane.setContentsURL("source/rest/country_add_rest.xml.html");
        addPane.setContentsType(ContentsType.PAGE);
        addTab.setPane(addPane);

        Tab updateTab = new Tab("country_update.xml");
        final HTMLPane updatePane = new HTMLPane();
        updatePane.setContentsURL("source/rest/country_update_rest.xml.html");
        updatePane.setContentsType(ContentsType.PAGE);
        updateTab.setPane(updatePane);

        Tab removeTab = new Tab("country_remove.xml");
        final HTMLPane removePane = new HTMLPane();
        removePane.setContentsURL("source/rest/country_remove_rest.xml.html");
        removePane.setContentsType(ContentsType.PAGE);
        removeTab.setPane(removePane);

        tabSet.setTabs(fetchTab, addTab, updateTab, removeTab);
        layout.addMember(tabSet);*/

        return layout;
    }

    public String getIntro() {
        return DESCRIPTION;
    }
    
    //查询窗口
	public void createSerchForm(SGPanel form){
		
				
		SGText chk_mix = new SGText("AREA_CODE",Util.TI18N.ISMIX());
		chk_mix.setValue("990000");
		
		SGText txt_enable = new SGText("AREA_CNAME",Util.TI18N.ENABLE_FLAG());
		txt_enable.setValue("测试区域");
		
		SGText combo = new SGText("ADDWHO",Util.TI18N.ACCOUNT_FEE());
		combo.setValue("wpsadmin");
		
		
//		SGCheck txt_mofify = new SGCheck("MODIFY_FLAG",Util.TI18N.MODIFY_FLAG());
//		txt_mofify.setColSpan(1);
		
        form.setItems(chk_mix,txt_enable,combo);
	}
        
}
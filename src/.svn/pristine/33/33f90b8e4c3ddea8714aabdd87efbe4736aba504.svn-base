package com.rd.client.view.base;

import java.util.HashMap;
import java.util.LinkedHashMap;

import com.google.gwt.user.client.rpc.AsyncCallback;
import com.rd.client.action.base.gpseq.NewDetailAction;
import com.rd.client.common.action.CancelAction;
import com.rd.client.common.action.DeleteAction;
import com.rd.client.common.action.NewAction;
import com.rd.client.common.action.SaveAction;
import com.rd.client.common.obj.LoginCache;
import com.rd.client.common.util.BasPrivRef;
import com.rd.client.common.util.ColorUtil;
import com.rd.client.common.util.StaticRef;
import com.rd.client.common.util.Util;
import com.rd.client.common.widgets.SGForm;
import com.rd.client.common.widgets.SGPanel;
import com.rd.client.common.widgets.SGTable;
import com.rd.client.common.widgets.SGText;
import com.rd.client.ds.base.BasGpsEqDS;
import com.rd.client.ds.base.BasGpsEqLogDS;
import com.rd.client.win.SearchWin;
import com.smartgwt.client.data.Criteria;
import com.smartgwt.client.data.DataSource;
import com.smartgwt.client.data.Record;
import com.smartgwt.client.types.Alignment;
import com.smartgwt.client.types.ListGridEditEvent;
import com.smartgwt.client.types.ListGridFieldType;
import com.smartgwt.client.widgets.Canvas;
import com.smartgwt.client.widgets.IButton;
import com.smartgwt.client.widgets.Window;
import com.smartgwt.client.widgets.events.ClickEvent;
import com.smartgwt.client.widgets.events.ClickHandler;
import com.smartgwt.client.widgets.form.DynamicForm;
import com.smartgwt.client.widgets.grid.ListGridField;
import com.smartgwt.client.widgets.grid.events.RecordClickEvent;
import com.smartgwt.client.widgets.grid.events.RecordClickHandler;
import com.smartgwt.client.widgets.grid.events.RecordDoubleClickEvent;
import com.smartgwt.client.widgets.grid.events.RecordDoubleClickHandler;
import com.smartgwt.client.widgets.grid.events.SelectionChangedHandler;
import com.smartgwt.client.widgets.grid.events.SelectionEvent;
import com.smartgwt.client.widgets.layout.SectionStack;
import com.smartgwt.client.widgets.layout.VLayout;
import com.smartgwt.client.widgets.toolbar.ToolStrip;

/**
 * 基础资料--GPS设备管理
 * @author Administrator
 *
 */
public class BasGpsEqView extends SGForm{
	
	private DataSource mainDS;
	private DataSource areaDs;
	private SGTable gpsTable;
	private SGTable areaTable;
	private SectionStack stack;
	private Window searchWin;
	private SGPanel searchForm;
	public Record record;
	private HashMap<String,String> detail_ck_map ;
	private HashMap<String,String> detail_map;
	
	private HashMap<String, IButton> add_detail_map;
	private HashMap<String, IButton> save_detail_map;
	private HashMap<String, IButton> del_detail_map;
	
	@Override
	public void createForm(DynamicForm form) {
		
	}
	
	public BasGpsEqView(String id) {
		super(id);
	}
	
	@Override
	public Canvas getViewPanel() {
		
		privObj = LoginCache.getUserPrivilege().get(getFUNCID());
		VLayout main = new VLayout();
		ToolStrip toolStrip = new ToolStrip();
		toolStrip.setAlign(Alignment.RIGHT);
		detail_ck_map = new HashMap<String,String>();
		detail_map = new HashMap<String,String>();
		
		mainDS = BasGpsEqDS.getInstance("BAS_GPSEQ", "BAS_GPSEQ");
		gpsTable = new SGTable(mainDS, "100%", "35%", true, true, false);
		gpsTable.setCanEdit(true);
		gpsTable.setEditEvent(ListGridEditEvent.DOUBLECLICK);
		gpsTable.setShowFilterEditor(false);
		gpsTable.addSelectionChangedHandler(new SelectionChangedHandler() {
			
			@Override
			public void onSelectionChanged(SelectionEvent event) {
				record = event.getRecord();
				Criteria findValues = new Criteria();
	            findValues.addCriteria("EQUIP_NO", record.getAttribute("EQUIP_NO"));
	            findValues.addCriteria("OP_FLAG", areaTable.OP_FLAG);
	            areaTable.PKEY = "EQUIP_NO";
	            areaTable.PVALUE = record.getAttribute("EQUIP_NO");
	            areaTable.fetchData(findValues);
			}
		});
		
		areaDs = BasGpsEqLogDS.getInstance("BAS_GPSEQ_LOG","BAS_GPSEQ_LOG");
		areaTable = new SGTable(areaDs,"100%","65%",false,true,false);
		areaTable.setCanEdit(true);	
		
		gpsTable.addRecordClickHandler(new RecordClickHandler() {
			
			@Override
			public void onRecordClick(RecordClickEvent event) {
				enableOrDisables(del_map, true);
				enableOrDisables(add_detail_map, true);
				enableOrDisables(del_detail_map, false);
				enableOrDisables(save_detail_map, false);
			}
		});
		gpsTable.addRecordDoubleClickHandler(new RecordDoubleClickHandler() {
			
			@Override
			public void onRecordDoubleClick(RecordDoubleClickEvent event) {
				enableOrDisables(add_map, false);
				enableOrDisables(del_map, false);
		        enableOrDisables(save_map, true);
			}
		});
		
		areaTable.addRecordDoubleClickHandler(new RecordDoubleClickHandler() {
			
			@Override
			public void onRecordDoubleClick(RecordDoubleClickEvent event) {
				enableOrDisables(add_detail_map, false);
				enableOrDisables(del_detail_map, false);
		        enableOrDisables(save_detail_map, true);
				
			}
		});
		
		areaTable.addRecordClickHandler(new RecordClickHandler() {
			
			@Override
			public void onRecordClick(RecordClickEvent event) {
				enableOrDisables(del_detail_map,true);
				
			}
		});
		
		
		getConfigList();
		
		//创建按钮布局
		createBtnWidget(toolStrip);
		
		//创建Section
		Canvas[] widget = new Canvas[2];
		String[] title = new String[2];
		widget[0] = gpsTable;
		widget[1] = areaTable;
		title[0] = "模版信息";
		title[1] = "使用记录";
		
		stack = createUDFSection(widget, title, true, true);
		
		main.setWidth100();
	    main.setHeight100();
	    main.addMember(toolStrip);
		main.addMember(stack);
			
		initVerify();
		
		return main;
	}

	@Override
	public void createBtnWidget(ToolStrip toolStrip) {
		toolStrip.setWidth("100%");
        toolStrip.setHeight("20");
        toolStrip.setPadding(2);
        toolStrip.setSeparatorSize(12);
        toolStrip.addSeparator();
         
        IButton searchButton = createBtn(StaticRef.FETCH_BTN,BasPrivRef.GPSRQ);
        searchButton.addClickHandler(new ClickHandler() {

			@Override
			public void onClick(ClickEvent event) {
				if(searchWin == null) {
					searchForm = new SGPanel();
					searchWin = new SearchWin(mainDS, createSerchForm(searchForm), stack.getSection(0)).getViewPanel();
				}
				else {
					searchWin.show();
				}
			}
        });
        
        IButton newButton = createBtn(StaticRef.CREATE_BTN,BasPrivRef.GPSRQ_P0_01);
        newButton.addClickHandler(new NewAction(gpsTable,areaTable,null,this));
        
        IButton saveButton = createBtn(StaticRef.SAVE_BTN,BasPrivRef.GPSRQ_P0_02);
        saveButton.addClickHandler(new SaveAction(gpsTable, check_map, this, 1));
        
        IButton delButton = createBtn(StaticRef.DELETE_BTN,BasPrivRef.GPSRQ_P0_03);
        delButton.addClickHandler(new DeleteAction(gpsTable,areaTable,"EQUIP_NO",this));
        
        IButton canButton = createBtn(StaticRef.CANCEL_BTN,BasPrivRef.GPSRQ_P0_04);
        canButton.addClickHandler(new CancelAction(gpsTable,areaTable,this));
        
        IButton newSubButton = createUDFBtn(Util.BI18N.NEWDETAIL(), StaticRef.ICON_NEW,BasPrivRef.GPSRQ_P0_05);
        newSubButton.addClickHandler(new NewDetailAction(gpsTable,areaTable,this,2));
        
        IButton savSubButton = createUDFBtn(Util.BI18N.SAVEDETAIL(), StaticRef.ICON_SAVE,BasPrivRef.GPSRQ_P0_06);
        savSubButton.addClickHandler(new SaveAction(areaTable, gpsTable,detail_ck_map,this,3));
        
        IButton delSubButton = createUDFBtn(Util.BI18N.REMOVEDETAIL(), StaticRef.ICON_DEL,BasPrivRef.GPSRQ_P0_07); 
        delSubButton.addClickHandler(new DeleteAction(areaTable,this,4));
        
        IButton canSubButton = createUDFBtn(Util.BI18N.CANCELDETAIL(), StaticRef.ICON_CANCEL,BasPrivRef.GPSRQ_P0_08); 
        canSubButton.addClickHandler(new CancelAction(areaTable,this,5));
        
        add_map.put(BasPrivRef.GPSRQ_P0_01, newButton);
        del_map.put(BasPrivRef.GPSRQ_P0_03, delButton);
        save_map.put(BasPrivRef.GPSRQ_P0_02, saveButton);
        save_map.put(BasPrivRef.GPSRQ_P0_04, canButton);
        
        enableOrDisables(add_map, true);
        enableOrDisables(del_map, false);
        enableOrDisables(save_map, false);
        
        //从表按钮联动
        add_detail_map = new HashMap<String, IButton>();
        save_detail_map = new HashMap<String, IButton>();
        del_detail_map = new HashMap<String, IButton>();
        add_detail_map.put(BasPrivRef.GPSRQ_P0_05, newSubButton);
        del_detail_map.put(BasPrivRef.GPSRQ_P0_07, delSubButton);
        save_detail_map.put(BasPrivRef.GPSRQ_P0_06, savSubButton);
        save_detail_map.put(BasPrivRef.GPSRQ_P0_08, canSubButton);
        enableOrDisables(add_detail_map, false);
        enableOrDisables(del_detail_map, false);
        enableOrDisables(save_detail_map, false);
        
        toolStrip.setMembersMargin(4);
        toolStrip.setMembers(searchButton, newButton, saveButton, delButton, canButton,
        		newSubButton,savSubButton, delSubButton,canSubButton);
        
	}
	
	private void getConfigList() {
		ListGridField EQUIP_NO = new ListGridField("EQUIP_NO", Util.TI18N.EQUIP_NO(), 130);
		EQUIP_NO.setTitle(ColorUtil.getRedTitle(Util.TI18N.EQUIP_NO()));
		ListGridField PURCHASE_DATE = new ListGridField("PURCHASE_DATE", Util.TI18N.PURCHASE_DATE(), 130);
		Util.initDate(gpsTable, PURCHASE_DATE);
		ListGridField STATUS = new ListGridField("STATUS", Util.TI18N.STATUS(), 130);
		Util.initCodesComboValue(STATUS,"EQUIP_STS");
		STATUS.setTitle(ColorUtil.getRedTitle(Util.TI18N.STATUS()));
		ListGridField ACTIVE_FLAG = new ListGridField("ACTIVE_FLAG",Util.TI18N.ACTIVE_FLAG(),60);
		ACTIVE_FLAG.setType(ListGridFieldType.BOOLEAN);
		ListGridField TRS_ID = new ListGridField("TRS_ID", Util.TI18N.TRS_ID(), 130);
		TRS_ID.setTitle(ColorUtil.getRedTitle(Util.TI18N.TRS_ID()));
		ListGridField PLATE_NO = new ListGridField("PLATE_NO", Util.TI18N.PLATE_NO(), 130);
		PLATE_NO.setTitle(ColorUtil.getRedTitle(Util.TI18N.PLATE_NO()));
		ListGridField USE_COMPANY = new ListGridField("USE_COMPANY", "使用单位", 130);
		initCustComboValue(USE_COMPANY,"","","");
		ListGridField EQUIP_MANAGER = new ListGridField("EQUIP_MANAGER", "责任人", 130);
		ListGridField CUR_POSITION = new ListGridField("CUR_POSITION", "当前所在地", 130);
		gpsTable.setFields(EQUIP_NO,PURCHASE_DATE,STATUS,ACTIVE_FLAG,TRS_ID,PLATE_NO,USE_COMPANY,EQUIP_MANAGER,CUR_POSITION);
		
		
		ListGridField TRS_IDS = new ListGridField("TRS_ID",ColorUtil.getRedTitle("运单号"), 130);
		ListGridField PLATE_NOS = new ListGridField("PLATE_NO",ColorUtil.getRedTitle("车牌号"), 130);
		ListGridField ABNORMAL_FLAG = new ListGridField("ABNORMAL_FLAG", "异常标记", 130);
		ABNORMAL_FLAG.setType(ListGridFieldType.BOOLEAN);
		ListGridField ABNORMAL_REASON = new ListGridField("ABNORMAL_REASON", "异常原因", 130);
		Util.initCodesComboValue(ABNORMAL_REASON,"ABNORMAL_REASON");
		ListGridField DUTYER = new ListGridField("DUTYER", "责任方", 130);
		Util.initCodesComboValue(DUTYER,"DUTY_TO");
		ListGridField CHANGE_TIME = new ListGridField("CHANGE_TIME", "发生时间", 130);
		Util.initDate(areaTable, CHANGE_TIME);
		areaTable.setFields(TRS_IDS,PLATE_NOS,ABNORMAL_FLAG,ABNORMAL_REASON,DUTYER,CHANGE_TIME);
	}
	
	private void initCustComboValue(ListGridField USECOMPANY,String append, String orderby, final String string) {
		final ListGridField combo = USECOMPANY;
		final String swhere = " WHERE CUSTOMER_FLAG='Y' AND ENABLE_FLAG='Y' " + append;

			Util.async.getComboValue("BAS_CUSTOMER", "ID", "SHORT_NAME", swhere, orderby, new AsyncCallback<LinkedHashMap<String, String>>() {
	
				public void onFailure(Throwable caught) {	
					;
				}
				public void onSuccess(LinkedHashMap<String, String> result) {
					if(result != null && result.size() > 0) {
						combo.setValueMap(result);
						combo.setDefaultValue(string);
						LoginCache.getBizCodes().put(swhere, result);
					}
				}					
			});
	}

	public DynamicForm createSerchForm(SGPanel form) {
		form.setDataSource(mainDS);
		form.setAutoFetchData(false);
		form.setAlign(Alignment.LEFT);
		
		
		SGText txt_name = new SGText("EQUIP_NO", Util.TI18N.EQUIP_NO());
		
		form.setItems(txt_name);
		
		return form;
	}
	
	@Override
	public void initVerify() {
		check_map.put("TABLE", "BAS_RANGE");
		
		check_map.put("EQUIP_NO", StaticRef.CHK_NOTNULL + Util.TI18N.EQUIP_NO());
		check_map.put("EQUIP_NO", StaticRef.CHK_UNIQUE + Util.TI18N.EQUIP_NO());
		check_map.put("PURCHASE_DATE", StaticRef.CHK_DATE + Util.TI18N.PURCHASE_DATE());
		check_map.put("TRS_ID", StaticRef.CHK_NOTNULL + Util.TI18N.TRS_ID());
		check_map.put("PLATE_NO", StaticRef.CHK_NOTNULL + Util.TI18N.PLATE_NO());
		check_map.put("STATUS", StaticRef.CHK_NOTNULL + Util.TI18N.STATUS());
		
		detail_ck_map.put("TABLE", "BAS_GPSEQ_LOG");
		
		detail_ck_map.put("CHANGE_TIME", StaticRef.CHK_DATE + "发生时间");
		detail_ck_map.put("TRS_ID", StaticRef.CHK_NOTNULL + "运单号");
		detail_ck_map.put("PLATE_NO", StaticRef.CHK_NOTNULL + "车牌号");
		
	}

	@Override
	public void onDestroy() {
		if(searchWin != null) {
			searchWin.destroy();
			searchForm.destroy();
		}
		gpsTable.destroy();
		areaTable.destroy();
		stack.destroy();
	}
	
	@Override
	public void initBtn(int initBtn) {
		if(initBtn == 1){
			enableOrDisables(add_detail_map, true);
		}
		else if(initBtn == 2){
			enableOrDisables(add_detail_map, false);
			enableOrDisables(save_detail_map, true);
			enableOrDisables(del_detail_map, false);
		}
		else if(initBtn ==3){
			enableOrDisables(add_detail_map, true);
			enableOrDisables(save_detail_map, false);
			enableOrDisables(del_detail_map, true);
		}else if(initBtn ==4){
			enableOrDisables(add_detail_map, true);
			enableOrDisables(save_detail_map, false);
			enableOrDisables(del_detail_map, false);
		}else if(initBtn ==5){
			enableOrDisables(add_detail_map, true);
			enableOrDisables(save_detail_map, false);
			if(areaTable.getRecords().length > 0){
				enableOrDisables(del_detail_map, true);
			}else{
				enableOrDisables(del_detail_map, false);
			}
			areaTable.OP_FLAG = StaticRef.MOD_FLAG;
		}
	}
	
}

package com.rd.client.view.settlement;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;


import com.google.gwt.user.client.rpc.AsyncCallback;
import com.rd.client.PanelFactory;
import com.rd.client.common.obj.FormUtil;
import com.rd.client.common.obj.LoginCache;
import com.rd.client.common.util.ColorUtil;
import com.rd.client.common.util.Util;
import com.rd.client.common.widgets.SGCheck;
import com.rd.client.common.widgets.SGCombo;
import com.rd.client.common.widgets.SGForm;
import com.rd.client.common.widgets.SGLText;
import com.rd.client.common.widgets.SGPage;
import com.rd.client.common.widgets.SGPanel;
import com.rd.client.common.widgets.SGSCombo;
import com.rd.client.common.widgets.SGTable;
import com.rd.client.common.widgets.SGText;
import com.rd.client.ds.settlement.TariffRuleDS;
import com.rd.client.ds.settlement.TarrifDiscountDS;
import com.rd.client.reflection.ClassForNameAble;
import com.rd.client.win.FeeRuleWin;
import com.smartgwt.client.data.DataSource;
import com.smartgwt.client.types.Alignment;
import com.smartgwt.client.types.SelectionStyle;
import com.smartgwt.client.types.TitleOrientation;
import com.smartgwt.client.types.VisibilityMode;
import com.smartgwt.client.widgets.Canvas;
import com.smartgwt.client.widgets.form.DynamicForm;
import com.smartgwt.client.widgets.form.ValuesManager;
import com.smartgwt.client.widgets.form.fields.ComboBoxItem;
import com.smartgwt.client.widgets.form.fields.FormItem;
import com.smartgwt.client.widgets.form.fields.PickerIcon;
import com.smartgwt.client.widgets.form.fields.events.ChangedEvent;
import com.smartgwt.client.widgets.form.fields.events.ChangedHandler;
import com.smartgwt.client.widgets.form.fields.events.FormItemClickHandler;
import com.smartgwt.client.widgets.form.fields.events.FormItemIconClickEvent;
import com.smartgwt.client.widgets.grid.ListGridField;
import com.smartgwt.client.widgets.layout.HStack;
import com.smartgwt.client.widgets.layout.SectionStack;
import com.smartgwt.client.widgets.layout.SectionStackSection;
import com.smartgwt.client.widgets.layout.VLayout;
import com.smartgwt.client.widgets.tab.Tab;
import com.smartgwt.client.widgets.tab.TabSet;
import com.smartgwt.client.widgets.toolbar.ToolStrip;
/**
 * 计费管理系统--应收管理--客户费率设置
 * @author Administrator
 *
 */
@ClassForNameAble
public class ReceRuleView extends SGForm implements PanelFactory {

	private DataSource ds;
	private DataSource discountDS;
	private SGTable table;
	public SGTable discountTable;
	private SectionStack section;
	private SGPanel basInfo;
	private SGPanel basInfo2;
	public SGPanel isG;
	public ValuesManager vm;
	
	@Override
	public Canvas getViewPanel() {
		
		privObj = LoginCache.getUserPrivilege().get(getFUNCID());
		
		VLayout main = new VLayout();
		main.setWidth100();
		main.setHeight100();

	    ToolStrip toolStrip = new ToolStrip();  //按钮布局
	    toolStrip.setAlign(Alignment.RIGHT);
	    ds = TariffRuleDS.getInstance("V_TARIFF_RULE","TARIFF_RULE");
	    discountDS=TarrifDiscountDS.getInstance("TARIFF_ADDITIONAL","TARIFF_ADDITIONAL");
	    
	    initVerify();
	    
	    HStack stack = new HStack();
		stack.setWidth("99%");
		stack.setHeight100();
	    
		table = new SGTable(ds, "100%", "100%", true, true, false); 
		table.setCanEdit(false);
		table.setShowFilterEditor(false);
		section = new SectionStack();
		final SectionStackSection listItem = new SectionStackSection("列表信息");
	    listItem.setItems(table);
	    listItem.setExpanded(true);
		listItem.setControls(new SGPage(table, true).initPageBtn());
	    section.addSection(listItem);
	    section.setWidth("100%");
	    
	    createListField();
		stack.addMember(section);
		addSplitBar(stack);
		
//		VLayout v_lay = new VLayout();
//		v_lay.setWidth("80%");
//		v_lay.setHeight100();
//		v_lay.setBackgroundColor(ColorUtil.BG_COLOR);
//		v_lay.setVisible(false);
		 
		TabSet leftTabSet = new TabSet();  
		leftTabSet.setWidth("100%");   
		leftTabSet.setHeight("100%"); 
		leftTabSet.setMargin(0);
		
		VLayout FeeInfo = new VLayout(); //订单明细栏
		FeeInfo.setWidth100();
		FeeInfo.addMember(createFeeInfo());
		
		VLayout discountItem = new VLayout(); //折扣 附件
		discountItem.setWidth100();
		discountItem.addMember(createDiscountTable());
		
		Tab tab1 = new Tab("费率设置");
		tab1.setPane(FeeInfo);
		leftTabSet.addTab(tab1);
		
	    Tab tab2 = new Tab("折扣与附加");
	    tab2.setPane(discountItem);
	    leftTabSet.addTab(tab2);
		
	    VLayout layOut = new VLayout();
		layOut.setWidth("60%");
		layOut.setHeight("100%");
		layOut.addMember(leftTabSet);
		layOut.setVisible(false);
		stack.addMember(layOut);
	    
		main.addMember(toolStrip);
		main.addMember(stack);
		return main;
	}
	
	private void createListField() {
		ListGridField PRIORTY = new ListGridField("PRIORTY", Util.TI18N.PRIORTY(), 100);//优先级
		ListGridField FEE_NAME = new ListGridField("FEE_NAME", Util.TI18N.FEE_NAME(), 80);//费用名城
		ListGridField FEE_BASE_NAME = new ListGridField("FEE_BASE_NAME", Util.TI18N.FEE_BASE_NAME(),110);//计费基准
		ListGridField START_AREA_ID_NAME = new ListGridField("START_AREA_ID_NAME", Util.TI18N.START_AREA_ID_NAME(),70);//起点区域
		ListGridField END_AREA_ID_NAME = new ListGridField("END_AREA_ID_NAME", Util.TI18N.END_AREA_ID_NAME(),70);//协议类型
		ListGridField GRADE_BASE = new ListGridField("GRADE_BASE_NAME", Util.TI18N.GRADE_BASE(),120);//协议对象
		ListGridField LOWER_LMT_OPRT = new ListGridField("LOWER_LMT_OPRT_NAME", Util.TI18N.LOWER_LMT_OPRT(),90);//上限运算符
		ListGridField LOWER_LMT = new ListGridField("LOWER_LMT", Util.TI18N.LOWER_LMT(),80);//上限值
		ListGridField UPPER_LMT_OPRT = new ListGridField("UPPER_LMT_OPRT_NAME", Util.TI18N.UPPER_LMT_OPRT(),90);//下线运算符
		ListGridField UPPER_LMT = new ListGridField("UPPER_LMT", Util.TI18N.UPPER_LMT(),80);//下限值
		ListGridField BASE_RATE = new ListGridField("BASE_RATE", Util.TI18N.BASE_RATE(),80);//基本费率
		ListGridField BASE_AMT = new ListGridField("BASE_AMT", Util.TI18N.BASE_AMT(),80);//基数金额
		ListGridField MIN_UNIT = new ListGridField("MIN_UNIT", Util.TI18N.MIN_UNIT(),80);//最小计算单位
		ListGridField MIN_AMT = new ListGridField("MIN_AMT", Util.TI18N.MIN_AMT(),80);//最低金额
		ListGridField MAX_AMT = new ListGridField("MAX_AMT", Util.TI18N.MAX_AMT(),80);//最高金额
		ListGridField BIZ_TYP = new ListGridField("BIZ_TYP_NAME", Util.TI18N.BIZ_TYP(),65);//最高金额
		ListGridField TRANS_SRVC_ID_NAME=new ListGridField("TRANS_SRVC_ID_NAME",Util.TI18N.TRANS_SRVC_ID(),65);
		
		table.setCanEdit(false);
		table.setShowFilterEditor(false);
		table.setSelectionType(SelectionStyle.SINGLE);
		table.setFields(START_AREA_ID_NAME,END_AREA_ID_NAME,BIZ_TYP,TRANS_SRVC_ID_NAME,FEE_NAME,FEE_BASE_NAME,GRADE_BASE,LOWER_LMT_OPRT,
				LOWER_LMT,UPPER_LMT_OPRT,UPPER_LMT,BASE_RATE,BASE_AMT,MIN_UNIT,MIN_AMT,MAX_AMT,PRIORTY);
	}
	
	private SectionStack createFeeInfo(){
		VLayout vLay = new VLayout();
		vLay.setWidth100();
		vLay.setBackgroundColor(ColorUtil.BG_COLOR);
		//1、起点区域，终点区域，运输服务
		final SGCombo TFF_NAME = new SGCombo("TFF_NAME","计费协议");
		Util.initComboValue(TFF_NAME,"TARIFF_HEADER","ID","TFF_NAME");
		
//		TextItem WHR_START_AREA_ID = new TextItem("WHR_START_AREA_ID");
//		WHR_START_AREA_ID.setVisible(false);
//		
//		ComboBoxItem START_AREA_ID_NAME = new ComboBoxItem("START_AREA_ID_NAME", Util.TI18N.START_AREA_ID_NAME());//发货区域
//		START_AREA_ID_NAME.setWidth(FormUtil.Width);
//		START_AREA_ID_NAME.setTitleOrientation(TitleOrientation.TOP);
//		Util.initArea(START_AREA_ID_NAME, WHR_START_AREA_ID);
//		
//		TextItem WHR_END_AREA_ID = new TextItem("WHR_END_AREA_ID");
//		WHR_END_AREA_ID.setVisible(false);
//		
//		ComboBoxItem END_AREA_ID_NAME = new ComboBoxItem("END_AREA_ID_NAME", Util.TI18N.END_AREA_ID_NAME());//收货区域
//		END_AREA_ID_NAME.setWidth(FormUtil.Width);
//		END_AREA_ID_NAME.setTitleOrientation(TitleOrientation.TOP);
//		Util.initArea(END_AREA_ID_NAME, WHR_END_AREA_ID);
		
//		SGCombo TRANS_SRVC_ID = new SGCombo("WHR_TRANS_SRVC_ID", Util.TI18N.TRANS_SRVC_ID());
//		Util.initTrsService(TRANS_SRVC_ID, "");
//		
//		SGCombo BIZ_TYP = new SGCombo("BIZ_TYP", ColorUtil.getRedTitle(Util.TI18N.BIZ_TYP()));
//		Util.initCodesComboValue(BIZ_TYP, "BIZ_TYP");
		
		//2、费用属性，费用名称，计费基准，进位方式
		SGCombo FEE_ATTR = new SGCombo("FEE_ATTR", Util.TI18N.FEE_ATTR(),true);
		FEE_ATTR.setTitle(ColorUtil.getRedTitle(Util.TI18N.FEE_ATTR()));
		Util.initCodesComboValue(FEE_ATTR, "FEE_ATTR");
		FEE_ATTR.setDisabled(true);
		FEE_ATTR.setVisible(false);
		
		SGCombo SUM_MODE = new SGCombo("SUM_MODE", "汇总方式");
		//FEE_ATTR.setTitle(ColorUtil.getRedTitle(Util.TI18N.FEE_ATTR()));
		Util.initCodesComboValue(SUM_MODE, "FEE_BASE");

		
		
		final SGCombo FEE_ID = new SGCombo("FEE_ID", Util.TI18N.FEE_NAME(),true);
		FEE_ID.setTitle(ColorUtil.getRedTitle(Util.TI18N.FEE_NAME()));
		Util.initComboValue(FEE_ID, "V_TRANS_CHARGE_TYPE", "ID", "FEE_NAME", " WHERE FEE_ATTR = '53EB6809BFCC436799F735AAE23658B9'");
		final SGText FEE_NAME = new SGText("FEE_NAME",Util.TI18N.FEE_NAME());
		FEE_NAME.setVisible(false);
		FEE_ID.addChangedHandler(new ChangedHandler() {

			@Override
			public void onChanged(ChangedEvent event) {
				FEE_NAME.setValue(FEE_ID.getDisplayValue());
			}
		});
		
		final SGCombo FEE_BASE = new SGCombo("FEE_BASE", Util.TI18N.FEE_BASE());
		FEE_BASE.setTitle(ColorUtil.getRedTitle(Util.TI18N.FEE_BASE()));
		//Util.initCodesComboValue(FEE_BASE, "FEE_BASE", true);		
		Util.initComboValue(FEE_BASE, "BAS_CODES", "CODE", "NAME_C", " where PROP_CODE = 'FEE_BASE'", "");
		final SGText FEE_BASE_NAME = new SGText("FEE_BASE_NAME",Util.TI18N.FEE_BASE_NAME());
		FEE_BASE_NAME.setVisible(false);
		FEE_BASE.addChangedHandler(new ChangedHandler() {

			@Override
			public void onChanged(ChangedEvent event) {
				FEE_BASE_NAME.setValue(FEE_BASE.getDisplayValue());
			}
		});
		
		SGCombo CARRY_TYP = new SGCombo("CARRY_TYP", Util.TI18N.CARRY_TYP());
//		CARRY_TYP.setTitle(ColorUtil.getRedTitle(Util.TI18N.CARRY_TYP()));
		Util.initCodesComboValue(CARRY_TYP, "CARRY_TYP");
		
		//3、数量单位，重量单位，体积单位，计费方式
		SGCombo UOM_UNIT = new SGCombo("UOM", Util.TI18N.UOM_UNIT(),true);
		Util.initComboValue(UOM_UNIT, "V_BAS_UOM", "DESCR", "UOM");
		
		SGCombo WEIGHT_UNIT = new SGCombo("WEIGHT_UNIT", Util.TI18N.WEIGHT_UNIT());
		Util.initComboValue(WEIGHT_UNIT, "BAS_MSRMNT_UNIT", "UNIT", "UNIT_NAME", " MSRMNT_CODE = 'WEIGHT'", " SHOW_SEQ");
		
		SGCombo VOLUME_UNIT = new SGCombo("VOLUME_UNIT", Util.TI18N.VOLUME_UNIT());
		Util.initComboValue(VOLUME_UNIT, "BAS_MSRMNT_UNIT", "UNIT", "UNIT_NAME", " MSRMNT_CODE = 'VOLUME'", " SHOW_SEQ");
		
		final SGCombo FEE_TYP = new SGCombo("FEE_TYP", Util.TI18N.FEE_TYP());
		FEE_TYP.setTitle(ColorUtil.getRedTitle(Util.TI18N.FEE_TYP()));
		Util.initCodesComboValue(FEE_TYP, "FEE_TYP");
		final SGText FEE_TYP_NAME = new SGText("FEE_TYP_NAME",Util.TI18N.FEE_TYP_NAME());
		FEE_TYP_NAME.setVisible(false);
		FEE_TYP.addChangedHandler(new ChangedHandler() {

			@Override
			public void onChanged(ChangedEvent event) {
				FEE_TYP_NAME.setValue(FEE_TYP.getDisplayValue());
			}
		});
		
		//4、优先级，分级标准
		SGText PRIORTY = new SGText("PRIORTY", Util.TI18N.PRIORTY());
		
		final SGCombo GRADE_BASE = new SGCombo("GRADE_BASE", Util.TI18N.GRADE_BASE(),true);
		GRADE_BASE.setTitle(ColorUtil.getRedTitle(Util.TI18N.GRADE_BASE()));
		//Util.initCodesComboValue(GRADE_BASE, "FEE_BASE",true);
		Util.initComboValue(GRADE_BASE, "BAS_CODES", "CODE", "NAME_C", " where PROP_CODE = 'FEE_BASE'", "");
		
		final SGCombo APPORT_BASE = new SGCombo("APPORT_BASE", "分摊基准");
		//Util.initCodesComboValue(APPORT_BASE, "FEE_BASE", true);
		Util.initComboValue(APPORT_BASE, "BAS_CODES", "CODE", "NAME_C", " where PROP_CODE = 'FEE_BASE'", "");
		
		//5、上限运算符，上限值，下限运算符，下限值
		SGCombo LOWER_LMT_OPRT = new SGCombo("LOWER_LMT_OPRT", Util.TI18N.LOWER_LMT_OPRT(),true);
		//Util.initCodesComboValue(LOWER_LMT_OPRT, "OPERATOR_DOWN",true);
		Util.initComboValue(LOWER_LMT_OPRT, "BAS_CODES", "CODE", "NAME_C", " where PROP_CODE = 'OPERATOR_DOWN'", "");
		
		SGText LOWER_LMT = new SGText("LOWER_LMT", Util.TI18N.LOWER_LMT());
		
		SGCombo UPPER_LMT_OPRT = new SGCombo("UPPER_LMT_OPRT", Util.TI18N.UPPER_LMT_OPRT());
		//Util.initCodesComboValue(UPPER_LMT_OPRT, "OPERATOR_DOWN",true);
		Util.initComboValue(UPPER_LMT_OPRT, "BAS_CODES", "CODE", "NAME_C", " where PROP_CODE = 'OPERATOR_DOWN'", "");
		
		SGText UPPER_LMT = new SGText("UPPER_LMT", Util.TI18N.UPPER_LMT());
		
		//6、基本费率，基数金额，最低金额，最高金额
		final SGLText BASE_RATE = new SGLText("BASE_RATE", Util.TI18N.BASE_RATE(),true);
		BASE_RATE.setTitle(ColorUtil.getRedTitle(Util.TI18N.BASE_RATE()));
		BASE_RATE.setWidth(FormUtil.longWidth);
		BASE_RATE.setColSpan(4);
		BASE_RATE.setValue("0.00");
		
		PickerIcon searchPicker = new PickerIcon(PickerIcon.SEARCH);
        searchPicker.addFormItemClickHandler(new FormItemClickHandler() {
			
			@Override
			public void onFormItemClick(FormItemIconClickEvent event) {
				 new FeeRuleWin(BASE_RATE, "40%", "38%").getViewPanel();
			}
		});
        BASE_RATE.setIcons(searchPicker);
        
        
		
		SGText BASE_AMT = new SGText("BASE_AMT", Util.TI18N.BASE_AMT());
		BASE_AMT.setValue("0.00");
		
//		SGText CONT_PRICE = new SGText("CONT_PRICE", Util.TI18N.SETT_CONT_PRICE());
//		CONT_PRICE.setValue("0.00");
		
		SGText MIN_AMT = new SGText("MIN_AMT", Util.TI18N.MIN_AMT(),true);
		MIN_AMT.setValue("0.00");
		
		SGText MAX_AMT = new SGText("MAX_AMT", Util.TI18N.MAX_AMT());
		MAX_AMT.setValue("0.00");
		
		
		//7、最小计数单位，激活
		SGText MIN_UNIT = new SGText("MIN_UNIT", Util.TI18N.MIN_UNIT());
		MIN_UNIT.setValue("0.00");
		
		SGCheck ENABLE_FLAG = new SGCheck("ENABLE_FLAG", Util.TI18N.ENABLE_FLAG());
		
		SGCheck EXPRESS_FLAG = new SGCheck("EXPRESS_FLAG", "表达式");
//		EXPRESS_FLAG.setValue(false);
//		EXPRESS_FL
		
		FEE_BASE.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
//				GRADE_BASE.setValue(Util.iff(event.getValue(),"").toString());
				APPORT_BASE.setValue(Util.iff(event.getValue(),"").toString());
			}
		});
		
		basInfo = new SGPanel();
		basInfo.setNumCols(9);
		basInfo.setWidth("40%");
		basInfo.setIsGroup(true);
		basInfo.setGroupTitle("限制条件");
		basInfo.setCellPadding(0);
		basInfo.setTitleWidth(75);
		
		TFF_NAME.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				HashMap<String,String> map = new HashMap<String,String>();
				Util.db_async.getRecord("FACTOR_ID,FEE_FACTOR,OBJ_TYPE,DICT_PARAM,DATA_FROM,DATA_ID,DATA_NAME", "TARIFF_FACTOR T,TARIFF_HEADER_FACTOR T1", " where T.ID=T1.FACTOR_ID and T1.TFF_ID='"+TFF_NAME.getValue()+"' ", map,new AsyncCallback<ArrayList<HashMap<String,String>>>() {
					
					@Override
					public void onSuccess(ArrayList<HashMap<String, String>> result) {
						if(result != null && result.size() > 0) {
							ArrayList<FormItem> list = new ArrayList<FormItem>();
							SGSCombo[] leftCombos = new SGSCombo[result.size()];
							SGCombo[] operCombos = new SGCombo[result.size()];
							SGCombo[] operatorCombos = new SGCombo[result.size()];
							SGSCombo[] rightCombos = new SGSCombo[result.size()];
							SGSCombo[] linkCombos = new SGSCombo[result.size()];
							SGCombo[] attCombos = new SGCombo[result.size()];
							ComboBoxItem[] attComboxs = new ComboBoxItem[result.size()];
							SGText[] attTexts = new SGText[result.size()];
							for(int j = 0; j < result.size(); j++){
								leftCombos[j] = new SGSCombo("LEFT_BRKT", "左括号"); 
								operCombos[j] = new SGCombo("OPER_OBJ", "限制条件1");
								System.out.println(result.get(j).get("FEE_FACTOR"));
								operCombos[j].setValue(result.get(j).get("FEE_FACTOR"));
								operatorCombos[j] = new SGCombo("OPERATOR", "操作符");
								if(result.get(j).get("OBJ_TYPE").equals("C9595DE73AC34B3B8E715637C2C846DC")){
									attTexts[j] = new SGText("ATTR_VAL", "值");
								}else{
									if(result.get(j).get("DATA_FROM").equals("BAS_AREA")){
										attComboxs[j] = new ComboBoxItem("ATTR_VAL", "值");
										attComboxs[j].setColSpan(2);
										attComboxs[j].setWidth(FormUtil.Width);
										attComboxs[j].setTitleOrientation(TitleOrientation.TOP);
										Util.initArea(attComboxs[j],attTexts[j]);
									}else if(result.get(j).get("DATA_FROM").equals("BAS_CODES")){
										attCombos[j] = new SGCombo("ATTR_VAL", "值");
										Util.initCodesComboValue(attCombos[j],result.get(j).get("DICT_PARAM"));
									}
									else {
										attCombos[j] = new SGCombo("ATTR_VAL", "值");
//										Util.initComboValue(attCombos[j],result.get(j).get("DATA_FROM"),result.get(j).get("DATA_ID"),result.get(j).get("DATA_NAME"));
									}
								}
								rightCombos[j] = new SGSCombo("RIGHT_BRKT", "右括号");
								linkCombos[j] = new SGSCombo("LINK", "连接符");
								
								LinkedHashMap<String, String> lb_hm = new LinkedHashMap<String, String>();
								lb_hm.put(" ", "");
								lb_hm.put("(", "(");
								leftCombos[j].setValueMap(lb_hm);
								
								LinkedHashMap<String, String> rb_hm = new LinkedHashMap<String, String>();
								rb_hm.put(" ", "");
								rb_hm.put(")", ")");
								rightCombos[j].setValueMap(rb_hm);
								
								LinkedHashMap<String, String> lj_hm = new LinkedHashMap<String, String>();
								lj_hm.put(" ", "");
								lj_hm.put("AND", "AND");
								lj_hm.put("OR", "OR");
								linkCombos[j].setValueMap(lj_hm);
								
//								Util.initComboValue(operCombos[j], "TARIFF_FACTOR T,TARIFF_HEADER_FACTOR T1", "ID", "FEE_FACTOR", " where T.ID=T1.FACTOR_ID and T1.TFF_ID='"+result.get(j).get("FACTOR_ID")+"' ", "");
								Util.initComboValue(operatorCombos[j], "BAS_CODES", "CODE", "NAME_C", " where PROP_CODE = 'OPERATOR'", "");
								if(leftCombos[j]!=null)list.add(leftCombos[j]);
								if(operCombos[j]!=null)list.add(operCombos[j]);
								if(operatorCombos[j]!=null)list.add(operatorCombos[j]);
								if(attTexts[j]!=null)list.add(attTexts[j]);
								if(attComboxs[j]!=null)list.add(attComboxs[j]);
								if(attCombos[j]!=null)list.add(attCombos[j]);
								if(rightCombos[j]!=null)list.add(rightCombos[j]);
								if(linkCombos[j]!=null)list.add(linkCombos[j]);
							}
							FormItem[] lists = (FormItem[])list.toArray(new FormItem[list.size()]);
							basInfo.setItems(lists);
						}
					}
					
					@Override
					public void onFailure(Throwable caught) {
						
					}
				});
			}
		});
		
		
		basInfo2 = new SGPanel();
		basInfo2.setWidth("40%");
		basInfo2.setIsGroup(true);
		basInfo2.setGroupTitle("计费协议");
		basInfo2.setCellPadding(0);
		basInfo2.setTitleWidth(75);
		basInfo2.setItems(TFF_NAME,FEE_ATTR,FEE_ID,FEE_BASE,CARRY_TYP,SUM_MODE,UOM_UNIT,WEIGHT_UNIT,VOLUME_UNIT,FEE_TYP,GRADE_BASE,PRIORTY,
				APPORT_BASE,
				ENABLE_FLAG,FEE_NAME,FEE_BASE_NAME,FEE_TYP_NAME);
		
		isG = new SGPanel();
		isG.setCellPadding(0);
		isG.setTitleWidth(75);
		isG.setWidth("40%");
		isG.setIsGroup(true);
		isG.setGroupTitle("级差");
		isG.setItems(LOWER_LMT_OPRT,LOWER_LMT,UPPER_LMT_OPRT,UPPER_LMT,BASE_RATE,EXPRESS_FLAG,BASE_AMT,MIN_AMT,MAX_AMT,MIN_UNIT);
	
		section = new SectionStack();
		section.setBackgroundColor(ColorUtil.BG_COLOR);
		section.addMember(basInfo);
		section.addMember(basInfo2);
		section.addMember(isG);
		section.setVisibilityMode(VisibilityMode.MULTIPLE);
		section.setAnimateSections(true);
		vLay.addMember(section);
		
		vm = new ValuesManager();
		vm.addMember(basInfo);
		vm.addMember(basInfo2);
		vm.addMember(isG);
		
		return section;
	}
	
	private SGTable createDiscountTable(){
		
		discountTable= new SGTable(discountDS, "100%", "100%", false, true, false);
		
		ListGridField BIZ_DATEOBJ=new ListGridField("BIZ_DATEOBJ","基准日期",100);
		ListGridField ADJ_DATEOBJ=new ListGridField("ADJ_DATEOBJ","调整日期",100);
		Util.initDate(discountTable,ADJ_DATEOBJ);
		ListGridField ADJ_RATIO=new ListGridField("ADJ_RATIO","调整比例",100);
		ListGridField AVAIL_BY=new ListGridField("AVAIL_BY","生效期",100);
		Util.initCodesComboValue(AVAIL_BY,"AVAILABLE_DATE");
		
		
		discountTable.setFields(BIZ_DATEOBJ,ADJ_DATEOBJ,ADJ_RATIO,AVAIL_BY);
		discountTable.setCanEdit(true);
		

//		discountTable.addRecordDoubleClickHandler(new RecordDoubleClickHandler() {
//			
//			@Override
//			public void onRecordDoubleClick(RecordDoubleClickEvent event) {
//				initAddDiscountBtn();
//				table.OP_FLAG = "M";
//			}
//		});
//		discountTable.addRecordClickHandler(new RecordClickHandler() {
//			
//			@Override
//			public void onRecordClick(RecordClickEvent event) {
//				enableOrDisables(del_discount_map, true);
//			}
//		});
		
		
		return discountTable;
	}
	
	@Override
	public void createForm(DynamicForm form) {
		
	}
	
	@Override
	public void createBtnWidget(ToolStrip strip) {
		
	}

	@Override
	public void initVerify() {
		
	}

	@Override
	public void onDestroy() {
		
	}

	@Override
	public Canvas createCanvas(String id, TabSet tabSet) {
		ReceRuleView view = new ReceRuleView();
		view.setFUNCID(id);
		view.addMember(view.getViewPanel());
		return view;
	}

	@Override
	public String getCanvasID() {
		return getID();
	}

}

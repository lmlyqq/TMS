package com.rd.client.view.base;

//import java.util.ArrayList;
//import java.util.Arrays;
//import java.util.HashMap;
//import java.util.LinkedHashMap;
//import java.util.List;
//import java.util.Map;
//
//import com.google.gwt.core.client.GWT;
//import com.google.gwt.user.client.rpc.AsyncCallback;
import com.rd.client.common.action.CancelAction;
import com.rd.client.common.action.DeleteAction;
import com.rd.client.common.action.NewAction;
import com.rd.client.common.action.SaveAction;
import com.rd.client.common.obj.LoginCache;
import com.rd.client.common.util.BasPrivRef;
import com.rd.client.common.util.ColorUtil;
//import com.rd.client.common.util.ObjUtil;
import com.rd.client.common.util.StaticRef;
import com.rd.client.common.util.SysPrivRef;
import com.rd.client.common.util.Util;
import com.rd.client.common.widgets.SGForm;
import com.rd.client.common.widgets.SGPanel;
import com.rd.client.common.widgets.SGTable;
import com.rd.client.common.widgets.SGText;
import com.rd.client.common.widgets.TreeTable;
import com.rd.client.ds.base.BasGpsEqDS;
import com.rd.client.win.SearchWin;
//import com.smartgwt.client.data.Criteria;
import com.smartgwt.client.data.DataSource;
//import com.smartgwt.client.data.Record;
//import com.smartgwt.client.data.fields.DataSourceTextField;
import com.smartgwt.client.types.Alignment;
//import com.smartgwt.client.types.DSDataFormat;
import com.smartgwt.client.types.ListGridEditEvent;
import com.smartgwt.client.types.ListGridFieldType;
import com.smartgwt.client.types.SelectionAppearance;
//import com.smartgwt.client.types.TitleOrientation;
import com.smartgwt.client.widgets.Canvas;
import com.smartgwt.client.widgets.IButton;
import com.smartgwt.client.widgets.Window;
import com.smartgwt.client.widgets.events.ClickEvent;
import com.smartgwt.client.widgets.events.ClickHandler;
//import com.smartgwt.client.widgets.events.DrawEvent;
//import com.smartgwt.client.widgets.events.DrawHandler;
import com.smartgwt.client.widgets.form.DynamicForm;
//import com.smartgwt.client.widgets.form.fields.ComboBoxItem;
//import com.smartgwt.client.widgets.form.fields.TextItem;
import com.smartgwt.client.widgets.grid.ListGridField;
//import com.smartgwt.client.widgets.grid.events.ChangeEvent;
//import com.smartgwt.client.widgets.grid.events.ChangeHandler;
//import com.smartgwt.client.widgets.grid.events.ChangedEvent;
//import com.smartgwt.client.widgets.grid.events.ChangedHandler;
import com.smartgwt.client.widgets.grid.events.RecordClickEvent;
import com.smartgwt.client.widgets.grid.events.RecordClickHandler;
import com.smartgwt.client.widgets.grid.events.RecordDoubleClickEvent;
import com.smartgwt.client.widgets.grid.events.RecordDoubleClickHandler;
import com.smartgwt.client.widgets.layout.SectionStack;
import com.smartgwt.client.widgets.layout.VLayout;
import com.smartgwt.client.widgets.toolbar.ToolStrip;
//import com.smartgwt.client.widgets.tree.Tree;
//import com.smartgwt.client.widgets.tree.TreeGridField;
//import com.smartgwt.client.widgets.tree.TreeNode;

/**
 * 基础资料--GPS设备管理
 * @author Administrator
 *
 */
public class BasGpsEqView extends SGForm{
	
	private DataSource mainDS;
	private DataSource areaDs;
	private SGTable gpsTable;
	private TreeTable areaTable;
	private SectionStack stack;
	private Window searchWin;
	private SGPanel searchForm;

	@Override
	public void createForm(DynamicForm form) {
		
	}
	
	public BasGpsEqView(String id) {
		super(id);
	}
	
	@Override
	public Canvas getViewPanel() {
		
		privObj = LoginCache.getUserPrivilege().get(getFUNCID());
		VLayout main = new VLayout();
		ToolStrip toolStrip = new ToolStrip();
		toolStrip.setAlign(Alignment.RIGHT);
		
		mainDS = BasGpsEqDS.getInstance("BAS_GPSEQ", "BAS_GPSEQ");
		gpsTable = new SGTable(mainDS, "100%", "45%", true, true, false);
		gpsTable.setCanEdit(true);
		gpsTable.setEditEvent(ListGridEditEvent.DOUBLECLICK);
		gpsTable.setShowFilterEditor(false);
		
		gpsTable.addRecordClickHandler(new RecordClickHandler() {
			
			@Override
			public void onRecordClick(RecordClickEvent event) {
				
				enableOrDisables(add_map, true);
				enableOrDisables(del_map, true);
				enableOrDisables(save_map, false);
				
//				Record record = event.getRecord();
//				if(record != null) {
//					Util.db_async.getRangeDetail(record.getAttribute("ID"), new AsyncCallback<HashMap<String,String>>() {
//						
//						@Override
//						public void onSuccess(HashMap<String, String> result) {
//							Tree troo = areaTable.getTree();
//							TreeNode[] node = troo.getAllNodes();
//							if(node != null) {
//								for(int i = 0;i<node.length;i++){
//									String area_code = node[i].getAttribute("AREA_CODE");
//									if(ObjUtil.isNotNull(result.get(area_code))){
//										areaTable.selectRecord(node[i]);
//									}else{
//										areaTable.deselectRecord(node[i]);
//									}
//								}
//							}
//						}
//						
//						@Override
//						public void onFailure(Throwable caught) {
//							
//						}
//					});
//				}
			}
		});
		gpsTable.addRecordDoubleClickHandler(new RecordDoubleClickHandler() {
			
			@Override
			public void onRecordDoubleClick(RecordDoubleClickEvent event) {
				enableOrDisables(add_map, false);
				enableOrDisables(del_map, false);
				enableOrDisables(save_map, true);
				
			}
		});
		
		areaDs = getDataSource();
		areaTable = new TreeTable(areaDs,"100%","100%");
		areaTable.setCanEdit(true);	
		areaTable.setCanAcceptDroppedRecords(false);
		areaTable.setSelectionAppearance(SelectionAppearance.CHECKBOX);
		areaTable.setShowSelectedStyle(false);
		areaTable.setShowPartialSelection(true);
		areaTable.setCascadeSelection(true);
		areaTable.setShowResizeBar(false);
		
//        TreeGridField orgField = new TreeGridField();
//        orgField.setName("SHORT_NAME");
//        areaTable.setFields(orgField);
        
//        areaTable.addDrawHandler(new DrawHandler() {  
//        	public void onDraw(DrawEvent event) {  
//        		Criteria criteria = new Criteria();
//        		criteria.addCriteria("OP_FLAG","M");
//        		areaTable.fetchData(criteria);  
//        	}  
//        }); 
		
		getConfigList(gpsTable);
		
		//创建按钮布局
		createBtnWidget(toolStrip);
		
		//创建Section
		Canvas[] widget = new Canvas[2];
		String[] title = new String[2];
		widget[0] = gpsTable;
		widget[1] = areaTable;
		title[0] = "模版信息";
		title[1] = "范围信息";
		
		stack = createUDFSection(widget, title, true, true);
		
		main.setWidth100();
	    main.setHeight100();
	    main.addMember(toolStrip);
		main.addMember(stack);
			
		initVerify();
		
		return main;
	}

	@Override
	public void createBtnWidget(ToolStrip toolStrip) {
		toolStrip.setWidth("100%");
        toolStrip.setHeight("20");
        toolStrip.setPadding(2);
        toolStrip.setSeparatorSize(12);
        toolStrip.addSeparator();
         
        IButton searchButton = createBtn(StaticRef.FETCH_BTN,SysPrivRef.DICTIONARY);
        searchButton.addClickHandler(new ClickHandler() {

			@Override
			public void onClick(ClickEvent event) {
				if(searchWin == null) {
					searchForm = new SGPanel();
					searchWin = new SearchWin(mainDS, createSerchForm(searchForm), stack.getSection(0)).getViewPanel();
				}
				else {
					searchWin.show();
				}
			}
        });
        
        IButton newButton = createBtn(StaticRef.CREATE_BTN,BasPrivRef.RANGE_P0_01);
        newButton.addClickHandler(new NewAction(gpsTable, null,this));
        
        IButton saveButton = createBtn(StaticRef.SAVE_BTN,BasPrivRef.RANGE_P0_02);
        saveButton.addClickHandler(new SaveAction(gpsTable, check_map, this, 1));
        
        IButton delButton = createBtn(StaticRef.DELETE_BTN,BasPrivRef.RANGE_P0_03);
        delButton.addClickHandler(new DeleteAction(gpsTable));
        
        IButton canButton = createBtn(StaticRef.CANCEL_BTN,BasPrivRef.RANGE_P0_04);
        canButton.addClickHandler(new CancelAction(gpsTable,this));
        
        add_map.put(BasPrivRef.RANGE_P0_01, newButton);
        del_map.put(BasPrivRef.RANGE_P0_03, delButton);
        save_map.put(BasPrivRef.RANGE_P0_02, saveButton);
        save_map.put(BasPrivRef.RANGE_P0_04, canButton);
        
        enableOrDisables(add_map, true);
        enableOrDisables(del_map, false);
        enableOrDisables(save_map, false);
        
        toolStrip.setMembersMargin(4);
        toolStrip.setMembers(searchButton, newButton, saveButton, delButton, canButton);
        
	}
	
	private void getConfigList(final SGTable gpsTable) {
		ListGridField EQUIP_NO = new ListGridField("EQUIP_NO", Util.TI18N.EQUIP_NO(), 130);
		EQUIP_NO.setTitle(ColorUtil.getRedTitle(Util.TI18N.EQUIP_NO()));
		ListGridField PURCHASE_DATE = new ListGridField("PURCHASE_DATE", Util.TI18N.PURCHASE_DATE(), 130);
//		PURCHASE_DATE.setTitle(ColorUtil.getRedTitle(Util.TI18N.PURCHASE_DATE()));
		Util.initDate(gpsTable, PURCHASE_DATE);
		ListGridField STATUS = new ListGridField("STATUS", Util.TI18N.STATUS(), 130);
		STATUS.setTitle(ColorUtil.getRedTitle(Util.TI18N.STATUS()));
		ListGridField ACTIVE_FLAG = new ListGridField("ACTIVE_FLAG",Util.TI18N.ACTIVE_FLAG(),60);
		ACTIVE_FLAG.setType(ListGridFieldType.BOOLEAN);
		ListGridField TRS_ID = new ListGridField("TRS_ID", Util.TI18N.TRS_ID(), 130);
		TRS_ID.setTitle(ColorUtil.getRedTitle(Util.TI18N.TRS_ID()));
		ListGridField PLATE_NO = new ListGridField("PLATE_NO", Util.TI18N.PLATE_NO(), 130);
		PLATE_NO.setTitle(ColorUtil.getRedTitle(Util.TI18N.PLATE_NO()));
		gpsTable.setFields(EQUIP_NO,PURCHASE_DATE,STATUS,ACTIVE_FLAG,TRS_ID,PLATE_NO);
		
		
//		List<String> fldList  = new ArrayList<String>();
//		List<String> titList  = new ArrayList<String>();
//		List<String> widList = new ArrayList<String>();
//		List<ListGridFieldType> typList = new ArrayList<ListGridFieldType>();
//		
//		String[] fields = {"EQUIP_NO","PURCHASE_DATE","STATUS","ACTIVE_FLAG","TRS_ID","PLATE_NO"};
//		fldList = Arrays.asList(fields);
//		String[] titles = {ColorUtil.getRedTitle(Util.TI18N.EQUIP_NO()),ColorUtil.getRedTitle(Util.TI18N.PURCHASE_DATE()),ColorUtil.getRedTitle(Util.TI18N.STATUS()), 
//						   ColorUtil.getRedTitle(Util.TI18N.ACTIVE_FLAG()),ColorUtil.getRedTitle(Util.TI18N.TRS_ID()),ColorUtil.getRedTitle(Util.TI18N.PLATE_NO())};
//		titList = Arrays.asList(titles);
//		
//		String[] width = {"150", "130", "130", "60","130","90"};
//		widList = Arrays.asList(width);
//		
//		ListGridFieldType[] types = {null, null, null, null,null,null};
//		typList = Arrays.asList(types);
//		createListField(gpsTable, fldList, titList, widList, typList);

//		final ListGridField FROM_AREA_ID = gpsTable.getField("FROM_AREA_ID");
//		Util.initComboValue(FROM_AREA_ID, "BAS_AREA", "AREA_CODE", "AREA_CNAME", " AREA_LEVEL = '4'", "");
//		
//		final ListGridField FROM_PROVINCE_ID = gpsTable.getField("FROM_PROVINCE_ID");
//		Util.initComboValue(FROM_PROVINCE_ID, "BAS_AREA", "AREA_CODE", "AREA_CNAME", " AREA_LEVEL = '3'", "");
//		FROM_PROVINCE_ID.addChangeHandler(new ChangeHandler() {
//
//			@SuppressWarnings("unchecked")
//			@Override
//			public void onChange(ChangeEvent event) {
//				int row = event.getRowNum();
//				String province = ObjUtil.ifObjNull(event.getValue(), "").toString();
//				Map<String,String> map = FROM_PROVINCE_ID.getAttributeAsMap("valueMap");
//				if(map!= null) {
//					gpsTable.setEditValue(row, "FROM_PROVINCE_NAME", map.get(province));
//				}
//				gpsTable.setEditValue(row, "FROM_AREA_ID","");
//				gpsTable.setEditValue(row, "FROM_AREA_NAME","");
//				if(ObjUtil.isNotNull(province)) {
//					Util.async.getComboValue("BAS_AREA", "AREA_CODE", "AREA_CNAME", " where parent_area_id = '" + province + "'","", new AsyncCallback<LinkedHashMap<String, String>>() {
//						
//						public void onFailure(Throwable caught) {	
//							;
//						}
//						public void onSuccess(LinkedHashMap<String, String> result) {
//							if(result != null && result.size() > 0) {
//								FROM_AREA_ID.setValueMap(result);
//							}
//						}					
//					});
//				}
//			}
//			
//		});
//		FROM_AREA_ID.addChangedHandler(new ChangedHandler() {
//			@SuppressWarnings("unchecked")
//			@Override
//			public void onChanged(ChangedEvent event) {
//				int row = event.getRowNum();
//				String area_id = ObjUtil.ifObjNull(event.getValue(), "").toString();
//				Map<String,String> map = FROM_AREA_ID.getAttributeAsMap("valueMap");
//				if(map != null) {
//					gpsTable.setEditValue(row, "FROM_AREA_NAME",map.get(area_id));
//				}
//			}
//			
//		});
	}
	
	public DynamicForm createSerchForm(SGPanel form) {
		form.setDataSource(mainDS);
		form.setAutoFetchData(false);
		form.setAlign(Alignment.LEFT);
		
//		TextItem txt_global = new TextItem("FULL_INDEX", "模糊查询");
//		txt_global.setTitleOrientation(TitleOrientation.TOP);
//		txt_global.setWidth(323);
//		txt_global.setColSpan(5);
//		txt_global.setEndRow(true);
		
		SGText txt_name = new SGText("EQUIP_NO", Util.TI18N.EQUIP_NO());
		
		form.setItems(txt_name);
		
		return form;
	}
	
	@Override
	public void initVerify() {
		check_map.put("TABLE", "BAS_RANGE");
		
		check_map.put("EQUIP_NO", StaticRef.CHK_NOTNULL + Util.TI18N.EQUIP_NO());
		check_map.put("PURCHASE_DATE", StaticRef.CHK_DATE + Util.TI18N.PURCHASE_DATE());
		check_map.put("TRS_ID", StaticRef.CHK_NOTNULL + Util.TI18N.TRS_ID());
		check_map.put("PLATE_NO", StaticRef.CHK_NOTNULL + Util.TI18N.PLATE_NO());
		check_map.put("STATUS", StaticRef.CHK_NOTNULL + Util.TI18N.STATUS());
	}

	@Override
	public void onDestroy() {
		if(searchWin != null) {
			searchWin.destroy();
			searchForm.destroy();
		}
		gpsTable.destroy();
		areaTable.destroy();
		stack.destroy();
	}
	
	//树形结构数据源
	static DataSource getDataSource(){
		DataSource dataSource = new DataSource();
//		dataSource.setDataFormat(DSDataFormat.JSON);
//		dataSource.setDataURL(GWT.getHostPageBaseURL()+"basQueryServlet?ds_id=BAS_AREA");
//		dataSource.setClientOnly(true);
//
//		// id
//		DataSourceTextField idField = new DataSourceTextField("AREA_CODE");
//		idField.setPrimaryKey(true);
//		idField.setRequired(true);
//		idField.setHidden(true);
//
//		// parentId
//		DataSourceTextField parentIdField = new DataSourceTextField("PARENT_AREA_ID");
//		parentIdField.setForeignKey("Area.AREA_CODE");
//		parentIdField.setRequired(true);
//		parentIdField.setHidden(true);
//		parentIdField.setRootValue(0);
//
//		// name
//		DataSourceTextField nameField = new DataSourceTextField("SHORT_NAME");
//		nameField.setRequired(true);
//
//		dataSource.setFields(idField, nameField, parentIdField);
//		dataSource.setClientOnly(false);

		return dataSource;
	}
}

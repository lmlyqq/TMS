package com.rd.client.view.tms;



import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import com.google.gwt.user.client.rpc.AsyncCallback;
import com.google.gwt.user.client.ui.DecoratorPanel;
import com.google.gwt.user.client.ui.HorizontalPanel;
import com.google.gwt.user.client.ui.SimplePanel;
import com.google.gwt.user.client.ui.VerticalPanel;
import com.rd.client.PanelFactory;
import com.rd.client.common.util.ObjUtil;
import com.rd.client.common.util.Util;
import com.rd.client.common.widgets.SGForm;
import com.rd.client.common.widgets.SGPanel;
import com.rd.client.reflection.ClassForNameAble;
import com.rednels.ofcgwt.client.ChartWidget;
import com.rednels.ofcgwt.client.model.ChartData;
import com.rednels.ofcgwt.client.model.Text;
import com.rednels.ofcgwt.client.model.axis.XAxis;
import com.rednels.ofcgwt.client.model.axis.YAxis;
import com.rednels.ofcgwt.client.model.elements.BarChart;
import com.rednels.ofcgwt.client.model.elements.LineChart;
import com.rednels.ofcgwt.client.model.elements.BarChart.BarStyle;
import com.smartgwt.client.util.Page;
import com.smartgwt.client.widgets.Canvas;
import com.smartgwt.client.widgets.form.DynamicForm;
import com.smartgwt.client.widgets.form.fields.ComboBoxItem;
import com.smartgwt.client.widgets.form.fields.events.ChangedEvent;
import com.smartgwt.client.widgets.form.fields.events.ChangedHandler;
import com.smartgwt.client.widgets.layout.VLayout;
import com.smartgwt.client.widgets.toolbar.ToolStrip;
/**
 * 总裁视图
 * @author Lang
 *
 */
@ClassForNameAble
public class TmsSupremoView extends SGForm implements PanelFactory {
	private ComboBoxItem totalTypeComb;
	private ComboBoxItem yearComb;
	private ComboBoxItem monthComb;
	
	/*public TmsSupremoView(String id) {
	    super(id);
	}*/
	
	public Canvas getViewPanel() {
		int width = Page.getWidth()- 60;
		int height = Page.getHeight() - 110 - 28 - 30;
        VLayout vLayout = new VLayout(); 
        
        SGPanel panel = new SGPanel();
        final ChartWidget chart = new ChartWidget();

    	HorizontalPanel hp = new HorizontalPanel();
    	hp.setSpacing(2);
		
		VerticalPanel vp2 = new VerticalPanel();
		DecoratorPanel dp = new DecoratorPanel();
		SimplePanel chartPanel = new SimplePanel();
		chartPanel.setStylePrimaryName("chartPanel");
		chart.setSize(String.valueOf(width), String.valueOf(height));
		chartPanel.add(chart);
		dp.add(chartPanel);
		vp2.add(dp);
		
		totalTypeComb = new ComboBoxItem("totalType", "统计类型");
		LinkedHashMap<String, String> totalTypeMap = new LinkedHashMap<String, String>();
		totalTypeMap.put("0", "--请选择--");
		totalTypeMap.put("1", "托运单");
		totalTypeMap.put("2", "调度单");
		totalTypeComb.setValueMap(totalTypeMap);
		totalTypeComb.setDefaultValue("0");
		
		yearComb = new ComboBoxItem("year", "年份");
		LinkedHashMap<String, String> yearMap = new LinkedHashMap<String, String>();
		yearMap.put("0", "--请选择--");
		int curYear = Integer.valueOf(currentYear());
		for (int i = 2013; i <= curYear; i++) {
			yearMap.put(String.valueOf(i), String.valueOf(i));
		}
		yearComb.setValueMap(yearMap);
		yearComb.setDefaultValue("0");
		
		monthComb = new ComboBoxItem("month", "月份");
		LinkedHashMap<String, String> monthMap = new LinkedHashMap<String, String>();
		monthMap.put("0", "--请选择--");
		monthMap.put("11", "01");
		monthMap.put("12", "02");
		monthMap.put("13", "03");
		monthMap.put("14", "04");
		monthMap.put("15", "05");
		monthMap.put("16", "06");
		monthMap.put("17", "07");
		monthMap.put("18", "08");
		monthMap.put("19", "09");
		monthMap.put("20", "10");
		monthMap.put("21", "11");
		monthMap.put("22", "12");
		monthComb.setValueMap(monthMap);
		monthComb.setDefaultValue("0");
		
		totalTypeComb.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if(isNull(event.getValue())){
					return;
				}
				changeSelected(chart);
			}
		});
		
		yearComb.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if(isNull(totalTypeComb.getValue(), event.getValue())){
					return;
				}
				changeSelected(chart);
			}
		});
		
		monthComb.addChangedHandler(new ChangedHandler() {
			
			@Override
			public void onChanged(ChangedEvent event) {
				if(isNull(totalTypeComb.getValue(), yearComb.getValue(), event.getValue())){
					return;
				}
				changeSelected(chart);
			}
		});
		panel.setItems(totalTypeComb, yearComb, monthComb);
		hp.add(vp2);
		vLayout.addMember(panel);
    	
    	vLayout.addMember(hp);
       
        return vLayout;
	}

	private ChartData get3DBarLineChartData(List<String> days, List<String> totals, List<String> maxtotals) {
		String xText = totalTypeComb.getDisplayValue();
		String title = totalTypeComb.getDisplayValue();
		if(ObjUtil.isNotNull(getCombValue(yearComb))){
			if(ObjUtil.isNotNull(getCombValue(monthComb))){
				title += getCombValue(yearComb) + "年";
				title += getCombValue(monthComb) + "月份统计报表";
				xText += getCombValue(yearComb) + "年";
				xText += getCombValue(monthComb) + "月份每日订单量";
			}else{
				title += getCombValue(yearComb) + "年统计报表";
				xText += getCombValue(yearComb) + "年每月订单量";
			}
		}else{
			title += "2013 - " + currentYear() + "年统计报表";
			xText += "每年订单量";
		}
		ChartData cd = new ChartData(title, "font-size: 14px; font-family: Verdana; text-align: center;");
		cd.setBackgroundColour("#ffffff");
		
		XAxis xa = new XAxis();
		xa.setLabels(days);
		xa.setZDepth3D(8);
		xa.setColour("#909090");
		cd.setXAxis(xa);
		YAxis ya = new YAxis();
		if(maxtotals == null || maxtotals.isEmpty()){
			ya.setSteps(20);
			ya.setMax(100);
		}else{
			Integer max = Integer.valueOf(maxtotals.get(0));
			ya.setSteps(Integer.valueOf((max / 5)));
			ya.setMax(max);
		}
		
		cd.setYAxis(ya);
		BarChart bchart3 = new BarChart(BarStyle.THREED);
		bchart3.setColour("#ff8800");
		for (int t = 0; t < totals.size(); t++) {
			bchart3.addValues(Integer.valueOf(totals.get(t)));
		}
		cd.addElements(bchart3);
		cd.setYLegend(new Text("订单量", "font-size: 11px;"));
		
		cd.setXLegend(new Text(xText, "font-size: 11px;"));

		LineChart lc1 = new LineChart();
		lc1.setText("订单量");
		lc1.setColour("#000000");
//		lc1.setRightAxis(true);
//		for (int t = 0; t < totals.size(); t++) {
//			lc1.addValues(Integer.valueOf(totals.get(t)));
//		}
		cd.addElements(lc1);

		return cd;
	}

//	private ChartData getAniPieChartData() {
//		ChartData cd = new ChartData("Results", "font-size: 14px; font-family: Verdana; text-align: center;");
//		cd.setBackgroundColour("#ffffff");
//		PieChart pie = new PieChart();
//		pie.setTooltip("#label# $#val#<br>#percent#");
//		pie.setGradientFill(false);
//		pie.setColours(new String[]{ "#ff0000", "#00ff00", "#0000ff", "#ff9900", "#ff00ff", "#FFFF00", "#6699FF", "#339933", "#1199aa" });
//		for (int t = 0; t < Random.nextInt(10) + 10; t++) {
//			pie.addSlices(new PieChart.Slice(Random.nextDouble() * 1.1 + .5, "" + (t + 1)));
//		}
//		cd.addElements(pie);
//		return cd;
//	}
//
//	private ChartData getAreaHollowChartData() {
//		ChartData cd1 = new ChartData("Volume Consumed", "font-size: 14px; font-family: Verdana; text-align: center;");
//		cd1.setBackgroundColour("#ffffff");
//		AreaChart area1 = new AreaChart();
//		area1.setFillAlpha(0.6f);
//		XAxis xa = new XAxis();
//		int floor = Random.nextInt(3) + 3;
//		double grade = 1.0 + (Random.nextInt(19) + 1) / 10.0;
//		int ln = 0;
//		for (float i = 0; i < 6.2; i += 0.2) {
//			if (ln % 3 == 0) {
//				xa.addLabels("" + ln);
//			}
//			else {
//				xa.addLabels("");
//			}
//			ln++;
//			area1.addValues(Math.sin(i) * grade + floor);
//		}
//
//		cd1.setXAxis(xa);
//		cd1.addElements(area1);
//		return cd1;
//	}
//
//	private ChartData getAreaLineChartData() {
//		ChartData cd2 = new ChartData("Growth per Region", "font-size: 14px; font-family: Verdana; text-align: center;");
//		cd2.setBackgroundColour("#ffffff");
//		XAxis xa = new XAxis();
//		xa.setLabels("J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D");
//		// xa.setMax(12);
//		cd2.setXAxis(xa);
//		AreaChart area2 = new AreaChart();
//		area2.setFillAlpha(0.3f);
//		area2.setColour("#ff0000");
//		area2.setFillColour("#ff0000");
//		for (int n = 0; n < 12; n++) {
//			if (n % 3 != 0) area2.addNull();
//			else area2.addValues(n * Random.nextDouble());
//		}
//		cd2.addElements(area2);
//		AreaChart area3 = new AreaChart();
//		area3.setFillAlpha(0.3f);
//		area3.setColour("#00aa00");
//		area3.setFillColour("#00aa00");
//		int floor = Random.nextInt(3);
//		double grade = (Random.nextInt(4) + 1) / 10.0;
//		for (int n = 0; n < 12; n++) {
//			if (n % 2 != 0) area3.addNull();
//			else area3.addValues(n * grade + floor);
//		}
//		cd2.addElements(area3);
//		return cd2;
//	}
//
//	private ChartData getBarChartGlassData() {
//		ChartData cd2 = new ChartData("Sales by Month 2007", "font-size: 14px; font-family: Verdana; text-align: center;");
//		cd2.setBackgroundColour("#ffffff");
//		XAxis xa = new XAxis();
//		xa.setLabels("J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N");
//		Label l = new Label("Dec", 45);
//		l.setSize(10);
//		l.setColour("#000000");
//		xa.addLabels(l);
//		cd2.setXAxis(xa);
//		YAxis ya = new YAxis();
//		ya.setSteps(16);
//		ya.setMax(160);
//		cd2.setYAxis(ya);
//		BarChart bchart2 = new BarChart(BarStyle.GLASS);
//		bchart2.setColour("#00aa00");
//		bchart2.setTooltip("$#val#");
//		for (int t = 0; t < 12; t++) {
//			bchart2.addValues(Random.nextInt(50) + 50);
//		}
//		cd2.addElements(bchart2);
//		return cd2;
//	}
//
//	private ChartData getBarChartTransparentData() {
//		ChartData cd = new ChartData("Sales by Month 2006", "font-size: 16px; font-weight: bold; font-family: Verdana; color:#ff9900; text-align: center;");
//		cd.setBackgroundColour("-1");
//		cd.setDecimalSeparatorComma(true);
//		XAxis xa = new XAxis();
//		xa.setLabels("J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D");
//		xa.getLabels().setColour("#ffff00");
//		xa.setGridColour("#aaaaff");
//		xa.setColour("#FF9900");
//		cd.setXAxis(xa);
//		YAxis ya = new YAxis();
//		ya.setRange(5000, 20000);
//		ya.setSteps(1000);
//		ya.setGridColour("#aaaaff");
//		ya.setColour("#FF9900");
//		cd.setYAxisLabelStyle(10, "#ffff00");
//		cd.setYAxis(ya);
//		BarChart bchart = new BarChart(BarStyle.NORMAL);
//		bchart.setColour("#000088");
//		bchart.setTooltip("$#val#");
//		for (int t = 0; t < 12; t++) {
//			bchart.addValues(Random.nextInt(5000) + 10000);
//		}
//		cd.addElements(bchart);
//		return cd;
//	}
//
//	private ChartData getCylinderChartData() {
//		ChartData cd3 = new ChartData("Sales by Quarter 2008", "font-size: 14px; font-family: Verdana; text-align: center;");
//		cd3.setBackgroundColour("#ffffff");
//		XAxis xa = new XAxis();
//		xa.setLabels("Q1", "Q2", "Q3", "Q4");
//		xa.setZDepth3D(10);
//		xa.setColour("#909090");
//		cd3.setXAxis(xa);
//		YAxis ya = new YAxis();
//		ya.setSteps(16);
//		ya.setMax(160);
//		cd3.setYAxis(ya);
//		CylinderBarChart bchart3 = new CylinderBarChart();
//		bchart3.setColour("#ff0000");
//		bchart3.setAlpha(.8f);
//		bchart3.setTooltip("$#val#");
//		for (int t = 0; t < 4; t++) {
//			bchart3.addValues(Random.nextInt(50) + 50);
//		}
//		cd3.addElements(bchart3);
//		return cd3;
//	}
//
//	private ChartData getCylinderChartGlassData() {
//		ChartData cd3 = new ChartData("Sales by Month 2008", "font-size: 14px; font-family: Verdana; text-align: center;");
//		cd3.setBackgroundColour("#ffffff");
//		XAxis xa = new XAxis();
//		xa.setLabels("J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D");
//		xa.setZDepth3D(5);
//		// xa.setMax(12);
//		xa.setTickHeight(4);
//		xa.setOffset(true);
//		xa.setColour("#B0B0ff");
//		cd3.setXAxis(xa);
//		YAxis ya = new YAxis();
//		ya.setSteps(16);
//		ya.setMax(160);
//		cd3.setYAxis(ya);
//		CylinderBarChart bchart3 = new CylinderBarChart(CylinderStyle.GLASS);
//		bchart3.setColour("#9090ff");
//		bchart3.setAlpha(0.6f);
//		bchart3.setTooltip("$#val#");
//		for (int t = 0; t < 12; t++) {
//			if (t % 2 == 0) bchart3.addValues(Random.nextInt(50) + 50);
//			else {
//				CylinderBarChart.Bar b = new CylinderBarChart.Bar(Random.nextInt(50) + 50);
//				b.setColour("#90ff90");
//				bchart3.addBars(b);
//			}
//
//		}
//		cd3.addElements(bchart3);
//		return cd3;
//	}
//
//	private ChartData getHorizBarChartData() {
//		ChartData cd1 = new ChartData("Top Car Speed", "font-size: 14px; font-family: Verdana; text-align: center;");
//		cd1.setBackgroundColour("#ffffff");
//		XAxis xa = new XAxis();
//		xa.setRange(0, 200, 20);
//		cd1.setXAxis(xa);
//		YAxis ya = new YAxis();
//		ya.addLabels("Ford", "Mazda", "BMW", "Porche");
//		ya.setOffset(true);
//		cd1.setYAxis(ya);
//		HorizontalBarChart bchart1 = new HorizontalBarChart();
//		bchart1.setTooltip("#val# mph");
//		bchart1.addBars(new HorizontalBarChart.Bar(Random.nextInt(87) + 100, "#ffff00"));
//		bchart1.addBars(new HorizontalBarChart.Bar(Random.nextInt(44) + 100, "#0000ff"));
//		bchart1.addBars(new HorizontalBarChart.Bar(Random.nextInt(23) + 100, "#00ff00"));
//		bchart1.addBars(new HorizontalBarChart.Bar(Random.nextInt(33) + 100, "#ff0000"));
//		cd1.addElements(bchart1);
//		cd1.setTooltip(new ToolTip(MouseStyle.FOLLOW));
//		return cd1;
//	}
//
//	private ChartData getHorizontalStackChartData() {
//		ChartData cd = new ChartData("Investments in ($M)", "font-size: 14px; font-family: Verdana; text-align: center;");
//		cd.setBackgroundColour("#ffffff");
//		cd.setLegend(new Legend(Position.RIGHT, true));
//		cd.setTooltip(new ToolTip(MouseStyle.FOLLOW));
//
//		HorizontalBarChart stack = new HorizontalBarChart();
//		stack.setTooltip("#key#<br>#val# / #total#");
//
//		stack.setKeys(new Keys("Shares", "#ff0000", 13), new Keys("Property", "#00ff00", 13));
//
//		XAxis xa = new XAxis();
//		xa.setRange(0, 3000, 500);
//		cd.setXAxis(xa);
//
//		YAxis ya = new YAxis();
//		ya.addLabels("John", "Frank", "Mary", "Andy");;
//		ya.setOffset(true);
//		cd.setYAxis(ya);
//
//		cd.addElements(stack);
//		return cd;
//	}
//
//	private ChartData getLineChartData() {
//		ChartData cd = new ChartData("Relative Performance", "font-size: 14px; font-family: Verdana; text-align: center;");
//		cd.setBackgroundColour("#ffffff");
//
//		LineChart lc1 = new LineChart();
//		lc1.setText("PoorEnterprises Pty");
//		lc1.setColour("#ff0000");
//		for (int t = 0; t < 30; t++) {
//			lc1.addValues(Random.nextDouble() * .5 - .5);
//		}
//		LineChart lc2 = new LineChart();
//		lc2.setColour("#009900");
//		lc2.setText("Ave-Ridge Co LLC");
//		for (int t = 0; t < 30; t++) {
//			lc2.addValues(Random.nextDouble() * .8);
//		}
//		LineChart lc3 = new LineChart();
//		lc3.setColour("#0000ff");
//		lc3.setText("Suu Perb Enterprises");
//		for (int t = 0; t < 30; t++) {
//			lc3.addValues(Random.nextDouble() * 1.1 + .5);
//		}
//		XAxis xa = new XAxis();
//		xa.setSteps(2);
//		cd.setXAxis(xa);
//
//		YAxis ya = new YAxis();
//		ya.setMax(2);
//		ya.setMin(-1);
//		cd.setYAxis(ya);
//
//		cd.setXLegend(new Text("Annual performance over 30 years", "{font-size: 10px; color: #000000}"));
//
//		cd.addElements(lc1);
//		cd.addElements(lc2);
//		cd.addElements(lc3);
//		return cd;
//	}
//
//	private ChartData getPieChartData() {
//		ChartData cd = new ChartData("Sales by Region", "font-size: 14px; font-family: Verdana; text-align: center;");
//		cd.setBackgroundColour("#ffffff");
//		cd.setLegend(new Legend(Position.RIGHT, true));
//
//		PieChart pie = new PieChart();
//		pie.setAlpha(0.5f);
//		pie.setRadius(130);
//		pie.setNoLabels(true);
//		pie.setTooltip("#label# $#val#<br>#percent#");
//		pie.setGradientFill(true);
//		pie.setColours("#ff0000", "#00aa00", "#0000ff", "#ff9900", "#ff00ff");
//		pie.addSlices(new PieChart.Slice(Random.nextInt(11) * 1000, "AU"));
//		pie.addSlices(new PieChart.Slice(Random.nextInt(88) * 1000, "USA"));
//		pie.addSlices(new PieChart.Slice(Random.nextInt(62) * 1000, "UK"));
//		pie.addSlices(new PieChart.Slice(Random.nextInt(14) * 1000, "JP"));
//		pie.addSlices(new PieChart.Slice(Random.nextInt(43) * 1000, "EU"));
//		cd.addElements(pie);
//		return cd;
//	}
//
//	private ChartData getRadarChartData() {
//		ChartData cd2 = new ChartData("Risk Areas", "font-size: 12px; text-align: left;");
//		cd2.setBackgroundColour("#ffffff");
//		RadarAxis ra = new RadarAxis();
//		ra.setMax(11);
//		ra.setStroke(2);
//		ra.setColour("#A1D4B5");
//		ra.setGridColour("#C0DEBF");
//		ra.setSpokeLabels("Financial", "Brand", "Legal", "Market", "Service");
//		cd2.setRadarAxis(ra);
//		AreaChart area2 = new AreaChart();
//		area2.setFillAlpha(0.3f);
//		area2.setColour("#ff0000");
//		area2.setFillColour("#ff0000");
//		area2.setLoop(true);
//		area2.addValues(Random.nextInt(8) + 2, Random.nextInt(8) + 2, Random.nextInt(8) + 2, Random.nextInt(8) + 2, Random.nextInt(8) + 2);
//		cd2.addElements(area2);
//		return cd2;
//	}
//
//	private ChartData getScatterLineChartData() {
//		ChartData cd = new ChartData("X Y Distribution", "font-size: 14px; font-family: Verdana; text-align: center;");
//		cd.setBackgroundColour("#ffffff");
//		ScatterChart scat = new ScatterChart(ScatterStyle.LINE);
//
//		// FIXME does not work in flash
//		scat.setTooltip("#x#,#y#");
//
//		for (int n = 0; n < 25; n++) {
//			int x = n * 2 - 25;
//			int y = Random.nextInt(30) - 15;
//			scat.addPoint(x, y);
//		}
//		XAxis xa = new XAxis();
//		xa.setRange(-25, 25, 5);
//		cd.setXAxis(xa);
//		YAxis ya = new YAxis();
//		ya.setRange(-25, 25, 5);
//		cd.setYAxis(ya);
//		cd.addElements(scat);
//		return cd;
//	}
//
//	private ChartData getScatterPointChartData() {
//		ChartData cd = new ChartData("X Y Distribution", "font-size: 14px; font-family: Verdana; text-align: center;");
//		cd.setBackgroundColour("#ffffff");
//		ScatterChart scat = new ScatterChart();
//		// Star star = new Star();
//		// star.setSize(10);
//		// star.setColour("#FF9900");
//		// star.setTooltip("#x#,#y#");
//		// scat.setDotStyle(star);
//		XAxis xa = new XAxis();
//		xa.setRange(-25, 25, 5);
//		cd.setXAxis(xa);
//		YAxis ya = new YAxis();
//		ya.setRange(-25, 25, 5);
//		cd.setYAxis(ya);
//		cd.addElements(scat);
//		return cd;
//	}
//
//	private ChartData getSketchChartData() {
//		ChartData cd2 = new ChartData("How many pies were eaten?", "font-size: 14px; font-family: Verdana; text-align: center;");
//		cd2.setBackgroundColour("#ffffff");
//		XAxis xa = new XAxis();
//		xa.setLabels("John", "Frank", "Mary", "Andy", "Mike", "James");
//		// xa.setMax(6);
//		cd2.setXAxis(xa);
//		SketchBarChart sketch = new SketchBarChart("#00aa00", "#009900", 6);
//		sketch.setTooltip("#val# pies");
//		sketch.addValues(Random.nextInt(6) + 1, Random.nextInt(5) + 1, Random.nextInt(3) + 1);
//		SketchBarChart.SketchBar skb = new SketchBarChart.SketchBar(Random.nextInt(5) + 5);
//		skb.setColour("#6666ff");
//		skb.setTooltip("Winner!<br>#val# pies");
//		sketch.addBars(skb);
//		sketch.addValues(Random.nextInt(5) + 1, Random.nextInt(5) + 1);
//		cd2.addElements(sketch);
//		return cd2;
//	}
//
//	private ChartData getStackChartData() {
//		ChartData cd = new ChartData("Investments in ($M)", "font-size: 14px; font-family: Verdana; text-align: center;");
//		cd.setBackgroundColour("#ffffff");
//
//		StackedBarChart stack = new StackedBarChart();
//		
//		stack.setKeys(new Keys("None", "#ffdd00", 13), new Keys("Property", "#ff0000", 13), new Keys("Shares", "#00ff00", 13), new Keys("Cash", "#ff00ff", 13));
//
//		XAxis xa = new XAxis();
//		xa.setLabels("John", "Frank", "Mary", "Andy");
//		cd.setXAxis(xa);
//
//		YAxis ya = new YAxis();
//		ya.setRange(0, 14, 7);
//		cd.setYAxis(ya);
//
//		cd.addElements(stack);
//		return cd;
//	}

	@Override
	public void createBtnWidget(ToolStrip strip) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void createForm(DynamicForm form) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void initVerify() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void onDestroy() {
		// TODO Auto-generated method stub
		
	}
	
	private void changeSelected(final ChartWidget chart){
		int totalType = Integer.parseInt(totalTypeComb.getValue().toString());
		String year = getCombValue(yearComb);
		String month = getCombValue(monthComb);
		
		Util.async.getTotalResult(year, month, totalType, new AsyncCallback<Map<String, List<String>>>() {
			
			@Override
			public void onSuccess(Map<String, List<String>> result) {
				chart.setJsonData(get3DBarLineChartData(result.get("days"), result.get("totals"), result.get("max_totals")).buildJSON().toString());
			}
			
			@Override
			public void onFailure(Throwable caught) {
				
			}
		});
	}
	
	private String getCombValue(ComboBoxItem comb){
		return "0".equals(comb.getValue()) ? 
				"" : comb.getDisplayValue();
	}
	
	private boolean isNull(Object... os){
		boolean isNull = false;
		if(os == null || os.length == 0)return true;
		for (Object o : os) {
			if(!ObjUtil.isNotNull(o) || "0".equals(o)){
				return true;
			}
		}
		return isNull;
	}
	
	public static native int currentYear() /*-{
		return new Date().getFullYear();
	}-*/;

	@Override
	public Canvas createCanvas(String id) {
		TmsSupremoView view = new TmsSupremoView();
		view.setFUNCID(id);
		view.addMember(view.getViewPanel());
		return view;
	}

	@Override
	public String getCanvasID() {
		// TODO Auto-generated method stub
		return getID();
	}

}
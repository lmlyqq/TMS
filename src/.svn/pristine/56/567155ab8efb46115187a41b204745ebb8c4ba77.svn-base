package com.rd.client.view.settlement;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import com.google.gwt.user.client.Cookies;
import com.google.gwt.user.client.rpc.AsyncCallback;
import com.rd.client.PanelFactory;
import com.rd.client.common.action.ExportAction;
import com.rd.client.common.obj.LoginCache;
import com.rd.client.common.util.MSGUtil;
import com.rd.client.common.util.ObjUtil;
import com.rd.client.common.util.SettPrivRef;
import com.rd.client.common.util.StaticRef;
import com.rd.client.common.util.Util;
import com.rd.client.common.widgets.SGButtonItem;
import com.rd.client.common.widgets.SGCombo;
import com.rd.client.common.widgets.SGForm;
import com.rd.client.common.widgets.SGPage;
import com.rd.client.common.widgets.SGPanel;
import com.rd.client.common.widgets.SGTable;
import com.rd.client.common.widgets.SGText;
import com.rd.client.ds.settlement.PayInitBillDS;
import com.rd.client.ds.settlement.PayInitBilldetailDS;
import com.rd.client.ds.settlement.PayInitDS;
import com.rd.client.reflection.ClassForNameAble;
import com.rd.client.win.SearchWin;
import com.rd.client.win.SuplrPayWin;
import com.smartgwt.client.data.Criteria;
import com.smartgwt.client.data.DSCallback;
import com.smartgwt.client.data.DSRequest;
import com.smartgwt.client.data.DSResponse;
import com.smartgwt.client.data.DataSource;
import com.smartgwt.client.types.Alignment;
import com.smartgwt.client.types.Autofit;
import com.smartgwt.client.types.SelectionAppearance;
import com.smartgwt.client.util.BooleanCallback;
import com.smartgwt.client.util.SC;
import com.smartgwt.client.widgets.Canvas;
import com.smartgwt.client.widgets.IButton;
import com.smartgwt.client.widgets.Window;
import com.smartgwt.client.widgets.events.ClickEvent;
import com.smartgwt.client.widgets.events.ClickHandler;
import com.smartgwt.client.widgets.form.DynamicForm;
import com.smartgwt.client.widgets.form.ValuesManager;
import com.smartgwt.client.widgets.form.fields.PickerIcon;
import com.smartgwt.client.widgets.form.fields.events.FormItemClickHandler;
import com.smartgwt.client.widgets.form.fields.events.FormItemIconClickEvent;
import com.smartgwt.client.widgets.grid.ListGrid;
import com.smartgwt.client.widgets.grid.ListGridField;
import com.smartgwt.client.widgets.grid.ListGridRecord;
import com.smartgwt.client.widgets.grid.events.SelectionChangedHandler;
import com.smartgwt.client.widgets.grid.events.SelectionEvent;
import com.smartgwt.client.widgets.layout.SectionStack;
import com.smartgwt.client.widgets.layout.SectionStackSection;
import com.smartgwt.client.widgets.layout.VLayout;
import com.smartgwt.client.widgets.tab.TabSet;
import com.smartgwt.client.widgets.toolbar.ToolStrip;

/**
 * 费用管理-结算管理-应付期初账单
 * @author cjt
 *
 */
@ClassForNameAble
public class PayInitBillView extends SGForm implements PanelFactory {

	private DataSource payinitDS;
	private DataSource detailDS;
	private DataSource RayInitBillDS;
	private SGTable table;
	private ListGrid itemTable;
	private SectionStack list_section;
	private ValuesManager vm;
	private Window searchWin;
	private SGPanel searchForm;
	private IButton addButton;
	private IButton removeButton;
	private IButton generateAdjButton;
	private IButton confButton;
	private IButton canfButton;
	private IButton generateReqButton;
	private Window addWin;
	
	/*public PayInitBillView(String id) {
		super(id);
	}*/

	@Override
	public void createForm(DynamicForm form) {
		
	}

	@Override
	public Canvas getViewPanel() {
		privObj = LoginCache.getUserPrivilege().get(getFUNCID());
		vm = new ValuesManager();
		VLayout main = new VLayout();
		main.setHeight100();
		main.setWidth("100%");
		
		ToolStrip toolStrip = new ToolStrip();
		toolStrip.setAlign(Alignment.RIGHT);
		payinitDS = PayInitBillDS.getInstance("BILL_PAY_INITIAL","BILL_PAY_INITIAL");
		detailDS = PayInitBilldetailDS.getInstance("BILL_PAY_INITDETAILS","BILL_PAY_INITDETAILS");
		RayInitBillDS = PayInitDS.getInstance("V_PAY_INIT");
		
		table = new SGTable(payinitDS,"100%", "100%", true, true, false){
			//明细表
			protected Canvas getExpansionComponent(final ListGridRecord record) {
				VLayout layout = new VLayout(5);
				
				itemTable = new ListGrid();
				itemTable.setDataSource(detailDS);
				itemTable.setWidth("100%");
				itemTable.setHeight(46);
				itemTable.setCellHeight(22);
				itemTable.setCanEdit(false);
				itemTable.setShowRowNumbers(false);
				itemTable.setAutoFitData(Autofit.VERTICAL);
				itemTable.setSelectionAppearance(SelectionAppearance.CHECKBOX);
				
				ListGridField LOAD_NO = new ListGridField("LOAD_NO","调度单号",110);
				ListGridField PLATE_NO = new ListGridField("PLATE_NO","车牌号",80);
				ListGridField VEHICLE_TYP_ID = new ListGridField("VEHICLE_TYP_ID","车型",70);
				Util.initComboValue(VEHICLE_TYP_ID, "BAS_VEHICLE_TYPE", "ID", "VEHICLE_TYPE", "", "");
				//ListGridField DRIVER = new ListGridField("DRIVER","司机",80);
				//ListGridField MOIBLE = new ListGridField("MOIBLE","联系电话",80);
				//ListGridField LOAD_DATE = new ListGridField("LOAD_DATE","发货日期",90);
				//Util.initDate(table, LOAD_DATE);
				//ListGridField UNLOAD_DATE = new ListGridField("UNLOAD_DATE","收货日期",90);
				//Util.initDate(table, UNLOAD_DATE);
				//ListGridField LOAD_NAME = new ListGridField("LOAD_NAME","发货方",120);
				//ListGridField UNLOAD_NAME = new ListGridField("UNLOAD_NAME","收货方",120);
				//ListGridField TOT_QNTY = new ListGridField("TOT_QNTY","托数",60);
				//ListGridField TOT_NET_W = new ListGridField("TOT_NET_W","箱数",60);
				//ListGridField TOT_GROSS_W = new ListGridField("TOT_GROSS_W","吨位",60);
				//ListGridField TOT_PACK_V = new ListGridField("TOT_PACK_V","体积",60);
				ListGridField TOT_AMOUNT = new ListGridField("TOT_AMOUNT","应付金额",90);
				ListGridField TAX_AMOUNT = new ListGridField("TAX_AMOUNT","税金",80);
				ListGridField SUBTAX_AMOUNT = new ListGridField("SUBTAX_AMOUNT","应付金额（不含税）",120);
				ListGridField NOTES = new ListGridField("NOTES","备注",200);
				
				itemTable.setFields(LOAD_NO,PLATE_NO,VEHICLE_TYP_ID,TOT_AMOUNT,TAX_AMOUNT,SUBTAX_AMOUNT,NOTES);
				Criteria criteria = new Criteria();
				criteria.addCriteria("OP_FLAG","M");
				criteria.addCriteria("INIT_NO",record.getAttributeAsString("INIT_NO"));
				itemTable.fetchData(criteria);
				
				layout.addMember(itemTable);
				layout.setLayoutLeftMargin(35);
				
				return layout;
			};
		};
		
		createListField();
		table.setShowFilterEditor(false);
		table.setCanExpandRecords(true);
		table.setConfirmDiscardEdits(false);
		table.setSelectionAppearance(SelectionAppearance.CHECKBOX);
		list_section = new SectionStack();
		final SectionStackSection listItem = new SectionStackSection(Util.TI18N.LISTINFO());
	    listItem.setItems(table);
	    listItem.setExpanded(true);
	    listItem.setControls(new SGPage(table, true).initPageBtn());
	    list_section.addSection(listItem);
	    list_section.setWidth("100%");
	    
        table.addSelectionChangedHandler(new SelectionChangedHandler() {
			@Override
			public void onSelectionChanged(SelectionEvent event) {
				ListGridRecord record=table.getSelectedRecord();
                //Record  rec=event.getRecord();
                //System.out.println(rec.getAttribute("ACCOUNT_STAT"));
				if(record!=null){				
					if(record.getAttribute("ACCOUNT_STAT")!=null){				
						if(record.getAttribute("ACCOUNT_STAT").equals("20")){				
							confButton.setDisabled(true);
							canfButton.setDisabled(false);	
							addButton.setDisabled(true);
							removeButton.setDisabled(true);
							generateAdjButton.setDisabled(true);
						}			
						else if(record.getAttribute("ACCOUNT_STAT").equals("10")){					
							canfButton.setDisabled(true);	
							confButton.setDisabled(false);
//							addButton.setDisabled(false);
//							removeButton.setDisabled(false);
//							generateAdjButton.setDisabled(false);
							if(("Y").equals(record.getAttribute("HOLD_FLAG"))){
								addButton.setDisabled(true);
								removeButton.setDisabled(true);
								generateAdjButton.setDisabled(true);
							}
							else if(("N").equals(record.getAttribute("HOLD_FLAG"))){
								addButton.setDisabled(false);
								removeButton.setDisabled(false);
								generateAdjButton.setDisabled(false);
							}							
						}				
					}								
					if(record.getAttribute("PAY_FLAG")!=null){					
						if(record.getAttribute("PAY_FLAG").equals("Y")){
							generateReqButton.setDisabled(true);					
						}else{				
							generateReqButton.setDisabled(false);
						}		
					}	
				}		
			}			
		});	
	    
	    createBtnWidget(toolStrip);
		main.addMember(toolStrip);
		main.addMember(list_section);
	    
		return main;
	}

	private void createListField() {
		
		ListGridField INIT_NO = new ListGridField("INIT_NO","对账单号",100);	
		ListGridField SUPLR_NAME = new ListGridField("SUPLR_NAME","承运商名称",115);
		ListGridField BELONG_MONETH = new ListGridField("BELONG_MONTH","所属帐期",70);
		ListGridField INIT_AMOUNT = new ListGridField("INIT_AMOUNT","期初金额",100);
		ListGridField INITITAL_AMOUNT = new ListGridField("INITITAL_AMOUNT","应付金额",100);
		ListGridField TAX_AMOUNT = new ListGridField("TAX_AMOUNT","税金",100);
		ListGridField SUBTAX_AMOUNT = new ListGridField("SUBTAX_AMOUNT","应付金额（不含税）",120);
		ListGridField ACCOUNT_STAT_NAME = new ListGridField("ACCOUNT_STAT_NAME","对账状态",80);
		ListGridField ACCOUNT_STAT = new ListGridField("ACCOUNT_STAT","对账状态",80);
		ACCOUNT_STAT.setHidden(true);
		//Util.initCodesComboValue(ACCOUNT_STAT, "ACCOUNT_STAT");
		
		table.setFields(INIT_NO,SUPLR_NAME,BELONG_MONETH,INIT_AMOUNT,INITITAL_AMOUNT,TAX_AMOUNT,SUBTAX_AMOUNT,ACCOUNT_STAT,ACCOUNT_STAT_NAME);
	}
	
	@Override
	public void createBtnWidget(ToolStrip strip) {
		strip.setWidth("100%");
		strip.setHeight("20");
		strip.setPadding(3);
		strip.setSeparatorSize(5);

		IButton searchButton = createBtn(StaticRef.FETCH_BTN,SettPrivRef.PayInitBill_P0);
		searchButton.addClickHandler(new ClickHandler() {

			@Override
			public void onClick(ClickEvent event) {
				if (searchWin == null) {
					searchForm = new SGPanel();
					searchWin = new SearchWin(payinitDS,
							createSerchForm(searchForm),list_section.getSection(0),vm).getViewPanel();
				} else {
					searchWin.show();
				}
			}

		});
		//添加费用
		addButton = createUDFBtn("添加费用",StaticRef.ICON_COPY,SettPrivRef.PayInitBill_P0_01);
		addButton.addClickHandler(new ClickHandler() {
			
			@Override
			public void onClick(ClickEvent event) {
				if(ObjUtil.isNotNull(table.getSelectedRecord())){
					if(table.getSelection().length==1){
						if(addWin==null){
							addWin=getShpTable();
							addWin.show();
						}
						else{
							addWin.show();
						}
					}else{
						SC.say("只能选择一条记录添加！");
						return;
					}
				}else{
					return;
				}
			}
		});
		
		//移除费用
		removeButton = createUDFBtn("移除费用",StaticRef.ICON_DEL,SettPrivRef.PayInitBill_P0_02);
		removeButton.addClickHandler(new ClickHandler() {
			
			@Override
			public void onClick(ClickEvent event) {
				if(table != null && table.getSelection().length>0) {
					if(itemTable != null && itemTable.getSelection().length>0){
						if(itemTable.getSelection().length==itemTable.getRecords().length){
							SC.say("只有一条或选中全部的时候不能移除！");
							return;
						}else{
							SC.confirm("确定移除勾选的费用？", new BooleanCallback() {
							public void execute(Boolean value) {
			                    if (value != null && value) {
			                    	ArrayList<String> sqlList = new ArrayList<String>();
			                    	StringBuffer sf = new StringBuffer();
			                    	ListGridRecord[] rec = itemTable.getSelection();
			                    	for(int i=0;i<rec.length;i++){
			                    		sf = new StringBuffer();
			                    		sf.append("delete from BILL_PAY_INITDETAILS where LOAD_NO='"+rec[i].getAttribute("LOAD_NO")+"'");
			                    		sqlList.add(sf.toString());
			                    	}
			                    	String sql="UPDATE BILL_PAY_INITIAL set(INITITAL_AMOUNT,TAX_AMOUNT,SUBTAX_AMOUNT)=(select SUM(TOT_AMOUNT),SUM(TOT_AMOUNT)*BILL_PAY_INITIAL.TAX/(100+BILL_PAY_INITIAL.TAX),SUM(TOT_AMOUNT)-SUM(TOT_AMOUNT)*BILL_PAY_INITIAL.TAX/(100+BILL_PAY_INITIAL.TAX) from BILL_PAY_INITDETAILS where BILL_PAY_INITDETAILS.INIT_NO=BILL_PAY_INITIAL.INIT_NO group by INIT_NO)  where INIT_NO='"+table.getSelectedRecord().getAttribute("INIT_NO")+"'";
						        	
			                    	sqlList.add(sql);
			                    	Util.async.excuteSQLList(sqlList, new AsyncCallback<String>() {
										
										@Override
										public void onSuccess(String result) {
											if(result.equals(StaticRef.SUCCESS_CODE)) {
												MSGUtil.showOperSuccess();
												table.collapseRecord(table.getSelectedRecord());
												table.invalidateCache();
												Criteria findValues = new Criteria();
												findValues.addCriteria("OP_FLAG", "M");
												table.fetchData(findValues);
											}else{
												MSGUtil.sayError(result);
											}
										}
										
										@Override
										public void onFailure(Throwable caught) {
											
										}
										
									});
			                    }
			                }
							});
						}
					}else{
						SC.say("请选择从表的数据！");
						return;
					}
				}else{
					SC.say("请选择主表的数据！");
					return;
				}
			}
		});
		
		//生成调整账单
		generateAdjButton = createUDFBtn("生成调整账单",StaticRef.ICON_EXPORT,SettPrivRef.PayInitBill_P0_03);
        generateAdjButton.addClickHandler(new ClickHandler() {
			
			@Override
			public void onClick(ClickEvent event) {
				HashMap<String, String> no_list = new HashMap<String, String>(); //期初单号
				ListGridRecord [] records=table.getSelection();
				if(records!=null&&records.length>0){
					for(int i=0;i<records.length;i++){
						no_list.put(String.valueOf(i+1), records[i].getAttribute("INIT_NO"));
					}
					
				}
				String loginUser = LoginCache.getLoginUser().getUSER_ID();
				HashMap<String, Object> listMap = new HashMap<String, Object>();
				//list.add(shpm_No);
				listMap.put("1", no_list);
				listMap.put("2",loginUser);
				
				String json = Util.mapToJson(listMap);
				Util.async.execProcedure(json, "BMS_PAY_CREATE_ADJNO(?,?,?)", new AsyncCallback<String>() {
					
					@Override
					public void onSuccess(String result) {
						
						if(result.substring(0, 2).equals(StaticRef.SUCCESS_CODE)){
							MSGUtil.showOperSuccess();
							
							//刷新数据
							table.discardAllEdits();
							table.invalidateCache();
							Criteria crit = table.getCriteria();
							if(crit == null) {
								crit = new Criteria();
							}
							crit.addCriteria("OP_FLAG",StaticRef.MOD_FLAG);
							crit.addCriteria(searchForm.getValuesAsCriteria());
							table.fetchData(crit,new DSCallback() {
								
								@Override
								public void execute(DSResponse response, Object rawData, DSRequest request) {
									if (table.getRecordList().getLength() > 0){
										table.selectRecord(0);
									}
									addButton.setDisabled(true);
									removeButton.setDisabled(true);
									generateAdjButton.setDisabled(true);
								}
							});
						
						}else{
							MSGUtil.sayError(result.substring(2));
						}
					}
					
					@Override
					public void onFailure(Throwable caught) {
						// TODO Auto-generated method stub
						
					}
				});
			}
		});
		//确认对账
		confButton = createUDFBtn("确认对账",StaticRef.ICON_SAVE,SettPrivRef.PayInitBill_P0_04);
		confButton.addClickHandler(new ClickHandler() {

			@Override
			public void onClick(ClickEvent event) {
				//final ListGridRecord []record=table.getSelection();
				ArrayList<String> sqlList = new ArrayList<String>();
				StringBuffer sf = new StringBuffer();
				final ListGridRecord[] rec = table.getSelection();
				for(int i=0;i<rec.length;i++){
					
					double inititalAmount=Double.parseDouble(ObjUtil.ifNull(rec[i].getAttribute("INITITAL_AMOUNT"),"0"));
					double initAmount=Double.parseDouble(ObjUtil.ifNull(rec[i].getAttribute("INIT_AMOUNT"),"0"));
					
					if(inititalAmount!=initAmount){						
						SC.say("账单金额已发生变化，请先生成调整账单！");
						sqlList=null;
						return;
					}
					if(rec[i].getAttribute("ACCOUNT_STAT").equals("20")){
						SC.say("该记录已经确认对账");
						sqlList=null;
	                    return;
	                    
					}else{
						sf = new StringBuffer();
						sf.append("update BILL_PAY_INITIAL set ACCOUNT_STAT='20' where INIT_NO=");
						sf.append("'"+rec[i].getAttribute("INIT_NO")+"'");
						sqlList.add(sf.toString());
					}
				}
				Util.async.excuteSQLList(sqlList, new AsyncCallback<String>() {

					@Override
					public void onFailure(Throwable caught) {
							
					}

					@Override
					public void onSuccess(String result) {
						if(result.equals(StaticRef.SUCCESS_CODE)) {
							for(int i=0;i<rec.length;i++){						
								rec[i].setAttribute("ACCOUNT_STAT_NAME", "已对账");
								rec[i].setAttribute("ACCOUNT_STAT", "20");
								}
								table.redraw();
								MSGUtil.showOperSuccess();
								confButton.setDisabled(true);
								canfButton.setDisabled(false);
								addButton.setDisabled(true);
								removeButton.setDisabled(true);
						}else{
							MSGUtil.sayError(result);
						}
					}
						
				});
			}
			
		});
		
		//取消对账
		canfButton = createUDFBtn("取消对账",StaticRef.ICON_CANCEL,SettPrivRef.PayInitBill_P0_07);
		canfButton.addClickHandler(new ClickHandler() {

			@Override
			public void onClick(ClickEvent event) {
				
				final ListGridRecord []record=table.getSelection();
				
				if(record!=null&&record.length>0){
					
					String recs="'"+record[0].getAttribute("INIT_NO")+"'";
					if(record.length>1){
					
						for(int k=1;k<record.length;k++){
							recs=recs+",'"+record[k].getAttribute("INIT_NO")+"'";
					
						}
					}
					
					Util.db_async.getRecord("INIT_NO", "BILL_PAY_REQUEST", " where INIT_NO in ("+recs+")", null, new AsyncCallback<ArrayList<HashMap<String,String>>>() {
						
						@Override
						public void onSuccess(ArrayList<HashMap<String, String>> result) {
							if(result!=null&&result.size()>0){
								SC.say("账单已生成请款单，无法取消对账！");
								return;
							}
							
							ArrayList<String> sqlList = new ArrayList<String>();
							
							for(int i=0;i<record.length;i++){
								
								if(record[i].getAttribute("ACCOUNT_STAT").equals("10")){
								
									SC.say("该记录还没有确认对账");
								
									sqlList=null;
			                    
									return;
									
								}else{
							
									String ID=record[i].getAttribute("ID");
							
									String sql="update BILL_PAY_INITIAL set ACCOUNT_STAT='10' where Id='"+ID+"'";
											
									sqlList.add(sql);
							    }
							}
								Util.async.excuteSQLList(sqlList, new AsyncCallback<String>() {
								
									@Override
									public void onFailure(Throwable caught) {
										MSGUtil.sayError(caught.getMessage());
									}
				
									@Override
									public void onSuccess(String result) {
										
										for(int i=0;i<record.length;i++){						
											
											record[i].setAttribute("ACCOUNT_STAT_NAME", "未对账");
											record[i].setAttribute("ACCOUNT_STAT", "10");
										}
										
										table.redraw();
										MSGUtil.showOperSuccess();
										confButton.setDisabled(false);	
										canfButton.setDisabled(true);
										addButton.setDisabled(false);
										removeButton.setDisabled(false);
									
									}
								
							
								});
							}
						
						@Override
						public void onFailure(Throwable caught) {
							
						
						}
					
					});
				}
			}
			
		});
		
		//生成请款单
		generateReqButton = createUDFBtn("生成请款单",StaticRef.ICON_EXPORT,SettPrivRef.PayInitBill_P0_05);
        generateReqButton.addClickHandler(new ClickHandler() {
			
			@Override
			public void onClick(ClickEvent event) {
				HashMap<String, String> no_list = new HashMap<String, String>(); //期初单号
				ListGridRecord [] records=table.getSelection();
				if(records!=null&&records.length>0){
					for(int i=0;i<records.length;i++){
						no_list.put(String.valueOf(i+1), records[i].getAttribute("INIT_NO"));
					}
					
				}
				String loginUser = LoginCache.getLoginUser().getUSER_ID();
				HashMap<String, Object> listMap = new HashMap<String, Object>();
				//list.add(shpm_No);
				listMap.put("1", no_list);
				listMap.put("2",loginUser);
				
				String json = Util.mapToJson(listMap);
				Util.async.execProcedure(json, "BMS_CONFIRM_REQUEST(?,?,?)", new AsyncCallback<String>() {
					
					@Override
					public void onSuccess(String result) {
						
						if(result.substring(0, 2).equals(StaticRef.SUCCESS_CODE)){
							MSGUtil.showOperSuccess();
							
							//刷新数据
							table.discardAllEdits();
							table.invalidateCache();
							Criteria crit = table.getCriteria();
							if(crit == null) {
								crit = new Criteria();
							}
							crit.addCriteria("OP_FLAG",StaticRef.MOD_FLAG);
							crit.addCriteria(searchForm.getValuesAsCriteria());
							table.fetchData(crit,new DSCallback() {
								
								@Override
								public void execute(DSResponse response, Object rawData, DSRequest request) {
									if (table.getRecordList().getLength() > 0){
										table.selectRecord(0);
									}
									generateReqButton.setDisabled(true);
								}
							});
						
						}else{
							MSGUtil.sayError(result.substring(2));
						}
					}
					
					@Override
					public void onFailure(Throwable caught) {
						// TODO Auto-generated method stub
						
					}
				});
			}
		});
		//导出
        IButton expButton = createBtn(StaticRef.EXPORT_BTN,SettPrivRef.PayInitBill_P0_06);
        expButton.addClickHandler(new ExportAction(table,"addtime desc"));
	
        strip.setMembersMargin(4);
        strip.setMembers(searchButton,addButton,removeButton,generateAdjButton,confButton,canfButton,generateReqButton,expButton);
	}
	
	public DynamicForm createSerchForm(final SGPanel form){
		form.setDataSource(payinitDS);
		form.setAutoFetchData(false);
		form.setAlign(Alignment.LEFT);
		
		SGText SUPLR_NAME = new SGText("SUPLR_NAME","承运商");
    	PickerIcon searchPicker = new PickerIcon(PickerIcon.SEARCH);
    	
		searchPicker.addFormItemClickHandler(new FormItemClickHandler() {
			
			@Override
			public void onFormItemClick(FormItemIconClickEvent event) {
				 new SuplrPayWin(form,"20%","50%").getViewPanel();		
			}
		});
		
		SUPLR_NAME.setIcons(searchPicker);
		
		SGText SUPLR_ID = new SGText("SUPLR_ID","承运商");
		SUPLR_ID.setVisible(false);
		
		SGText BELONG_MONETH = new SGText("BELONG_MONTH","所属期");
		
		SGCombo ACCOUNT_STAT = new SGCombo("ACCOUNT_STAT","对账状态");
		Util.initComboValue(ACCOUNT_STAT, "BAS_CODES","CODE","NAME_C"," where prop_code='ACCOUNT_STAT'");
		
		form.setItems(SUPLR_ID,SUPLR_NAME,BELONG_MONETH,ACCOUNT_STAT);
		return form;
	}
	
	@Override
	public void initVerify() {
		
	}

	@Override
	public void onDestroy() {
		if(searchWin != null) {
			searchWin.destroy();
			searchForm.destroy();
		}
	}
	
	public Window getShpTable() {
		
		final SGTable unshpmTable1;
    	unshpmTable1=new SGTable(RayInitBillDS, "100%", "100%", false, true, false);
		unshpmTable1.setSelectionAppearance(SelectionAppearance.CHECKBOX);
		unshpmTable1.setCanEdit(false); 
		createUnshpmField(unshpmTable1);
	
		final SectionStack shpSectionStack =new SectionStack();	 	
		SectionStackSection shpsection=new SectionStackSection("费用信息");
		final DynamicForm pageform=new SGPage(unshpmTable1, true).initPageBtn();		
		shpsection.setItems(unshpmTable1);
		shpsection.setExpanded(true);
		shpsection.setControls(pageform);
		shpSectionStack.addSection(shpsection);
		final Window win=new Window();
		VLayout shpLay = new VLayout();
		final SGPanel form=new SGPanel();
		
		SGText SUPLR_CNAME = new SGText("SUPLR_CNAME","承运商");
		SUPLR_CNAME.setValue(table.getSelectedRecord().getAttribute("SUPLR_NAME"));
		SUPLR_CNAME.setDisabled(true);
		//Util.initComboValue(SUPLR_CNAME, "BAS_SUPPLIER", "SUPLR_CNAME", "SUPLR_CNAME","", "");
		SGText LOAD_NO = new SGText("LOAD_NO", "调度单号");
		SGText PLATE_NO = new SGText("PLATE_NO", "车牌号");
		SGCombo FEE_TYPE = new SGCombo("FEE_TYPE", "费用类型");
		Util.initComboValue(FEE_TYPE,"BAS_CODES","NAME_C","NAME_C"," where prop_code='INITBILL_TYPE' ","");
        SGText BELONG_MONTH = new SGText("BELONG_MONTH", "所属账期");
		//SGText UNLOAD_NAME = new SGText("UNLOAD_NAME", "收货方");

		SGButtonItem searchButton1=new SGButtonItem(StaticRef.FETCH_BTN);
		searchButton1.setWidth(80);
		searchButton1.setColSpan(2);
		searchButton1.addClickHandler(
			    new com.smartgwt.client.widgets.form.fields.events.ClickHandler() {
				
				@Override
				public void onClick(
						com.smartgwt.client.widgets.form.fields.events.ClickEvent event) {
					
					   
					unshpmTable1.discardAllEdits();
					unshpmTable1.invalidateCache();
					final Criteria criteria = new Criteria();
					criteria.addCriteria("OP_FLAG","M");
					criteria.addCriteria(form.getValuesAsCriteria());
					unshpmTable1.setFilterEditorCriteria(criteria);
					unshpmTable1.fetchData(criteria, new DSCallback() {

						@SuppressWarnings("unchecked")
						@Override
						public void execute(DSResponse response, Object rawData,
								DSRequest request) {
							if(pageform != null) {
								pageform.getField("CUR_PAGE").setValue("1");
								pageform.getField("TOTAL_COUNT").setValue(Cookies.getCookie("TOTALROWS"));
								pageform.getField("SUM_PAGE").setValue(Cookies.getCookie("TOTALPAGES"));
								String sqlwhere = Cookies.getCookie("SQLWHERE");
								if(ObjUtil.isNotNull(sqlwhere) && sqlwhere.length() > 1) {
									table.setProperty("WHERE", sqlwhere.substring(1,sqlwhere.length()-1));
									//LoginCache.setPageResult(table, pageForm.getField("TOTAL_COUNT"), pageForm.getField("SUM_PAGE"));
								}
							}
							LinkedHashMap<String, String> map = (LinkedHashMap<String, String>) criteria.getValues();
							if(map.get("criteria") != null) {
								map.remove("criteria");
							}
							if(map.get("_constructor") != null) {
								map.remove("_constructor");
							}
							if(map.get("C_ORG_FLAG") != null) {
								Object obj = map.get("C_ORG_FLAG");
								Boolean c_org_flag = (Boolean)obj;
								map.put("C_ORG_FLAG",c_org_flag.toString());
							}			
						
						}
						
					});
				}
			});
		SGButtonItem confirmButton=new SGButtonItem("确定",StaticRef.ICON_SAVE);
		confirmButton.setWidth(80);
		confirmButton.setColSpan(2);
		confirmButton.addClickHandler(new com.smartgwt.client.widgets.form.fields.events.ClickHandler() {
			
			@Override
			public void onClick(
					com.smartgwt.client.widgets.form.fields.events.ClickEvent event) {
				if(table.getSelectedRecord().getAttribute("ACCOUNT_STAT").equals("20")){
					SC.say("已经确认的对账单，无法添加费用！");
					return;
				}
			
				final ListGridRecord []records=unshpmTable1.getSelection();
			
				//for(int j=0)
				if(records!=null&&records.length>0){
					
					Util.db_async.getRecord("LOAD_NO,TOT_AMOUNT,INIT_NO", "BILL_PAY_INITDETAILS", " where INIT_NO='"+table.getSelectedRecord().getAttribute("INIT_NO")+"'", null, new AsyncCallback<ArrayList<HashMap<String,String>>>() {
						
						@Override
						public void onSuccess(ArrayList<HashMap<String, String>> result) {
							String nums="";
							
							if(result!=null&&result.size()>0){
							
								for(int i=0;i<result.size();i++){
								
									nums=nums+result.get(i).get("LOAD_NO")+",";
							
								}
							}
							final ArrayList<String> sqlList = new ArrayList<String>();
		                	
							String INIT_NO=table.getSelectedRecord().getAttribute("INIT_NO");
		                	
							for(int i=0;i<records.length;i++){
		                	
								
								if(nums.indexOf(records[i].getAttribute("LOAD_NO")+",")>=0){
									
									for(int k=0;k<result.size();k++){
										if(result.get(k).get("LOAD_NO").equals(records[i].getAttribute("LOAD_NO"))){
											final String amount2=records[i].getAttribute("AMOUNT");
											final String shpm_no=records[i].getAttribute("LOAD_NO");
											String amount1=result.get(k).get("TOT_AMOUNT");
											double amounts=Double.parseDouble(amount1)+Double.parseDouble(amount2);
											String sql="update BILL_PAY_INITDETAILS set TOT_AMOUNT='"+amounts+"' where LOAD_NO='"+shpm_no+"'";
							                sqlList.add(sql);	
										}
									}
								}else{		                		
									String sql="insert into  BILL_PAY_INITDETAILS " +
	                				"(INIT_NO,LOAD_NO,VEHICLE_TYP_ID,PLATE_NO,BELONG_MONTH,TOT_AMOUNT,SUPLR_ID,SUPLR_NAME,NOTES,INIT_AMOUNT)" +
	                				"VALUES('"+INIT_NO+"','"+ObjUtil.ifNull(records[i].getAttribute("LOAD_NO"),"")+
	                				"','"+ObjUtil.ifNull(records[i].getAttribute("VEHICLE_TYP_ID"),"")+"','"+ObjUtil.ifNull(records[i].getAttribute("PLATE_NO"),"")+"','"+ObjUtil.ifNull(records[i].getAttribute("BELONG_MONTH"),"")+
	                				"','"+ObjUtil.ifNull(records[i].getAttribute("AMOUNT"),"0")+"','"+records[i].getAttribute("SUPLR_ID")+"','"+ObjUtil.ifNull(records[i].getAttribute("SUPLR_NAME"),"")+"','"+ObjUtil.ifNull(records[i].getAttribute("DESCR"),"")+"',0)";     		                		
									sqlList.add(sql);		                				        	
		                	
								}
		                	
							
							}
		    				Util.async.excuteSQLList(sqlList, new AsyncCallback<String>() {

								@Override
								public void onFailure(Throwable caught) {
								
								}

								@Override
								public void onSuccess(String result) {
									if(result.substring(0,2).equals("00")){
										String sql="UPDATE BILL_PAY_INITIAL set(INITITAL_AMOUNT,TAX_AMOUNT,SUBTAX_AMOUNT)=(select SUM(TOT_AMOUNT),SUM(TOT_AMOUNT)*BILL_PAY_INITIAL.TAX/(100+BILL_PAY_INITIAL.TAX),SUM(TOT_AMOUNT)-SUM(TOT_AMOUNT)*BILL_PAY_INITIAL.TAX/(100+BILL_PAY_INITIAL.TAX) from BILL_PAY_INITDETAILS where BILL_PAY_INITDETAILS.INIT_NO=BILL_PAY_INITIAL.INIT_NO group by INIT_NO)  where INIT_NO='"+table.getSelectedRecord().getAttribute("INIT_NO")+"'";
						        	
										ArrayList<String> sqlList1 = new ArrayList<String>();
										
										sqlList1.add(sql);
		        						
										Util.async.excuteSQLList(sqlList1, new AsyncCallback<String>() {
		    	        					
		    	        					@Override
		    	        					public void onFailure(Throwable caught) {
		    	        						MSGUtil.sayError(caught.getMessage());
		    	        					}

		    	        					@Override
		    	        					public void onSuccess(String result) {
		    	        						if(result.substring(0,2).equals("00")){
		    	        						//System.out.println(table.getSelectedRecord());
		    	        							
		    	        							win.hide();
		    	        							table.collapseRecord(table.getSelectedRecord());
		    	        							final Criteria criteria = new Criteria();
		    	        							criteria.addCriteria("OP_FLAG","M");
		    	        							table.fetchData(criteria);
		    	        							table.redraw();
		    	        							MSGUtil.showOperSuccess();
		    	        						}
		    	        					}
		    	        					
		    	        				});	
										
									}else{
										
										SC.say("操作失败");
										win.hide();
									}
								}
		    				});
						}
						
						@Override
						public void onFailure(Throwable caught) {
							
						}
					});
				
	
				}else{
					SC.say("请选中记录操作");
				}	

			}
		
		});
		
		
		
		
		form.setItems(SUPLR_CNAME,LOAD_NO,PLATE_NO,FEE_TYPE,BELONG_MONTH,searchButton1,confirmButton);
		form.setNumCols(10);
		form.setWidth("40%");
		shpLay.addMember(form);

		shpLay.addMember(shpSectionStack);		
		win.addItem(shpLay);
		win.setTitle("添加费用");
		win.setWidth("65%");
		win.setHeight("70%");
		win.setTop("20%");
		win.setLeft("25%");
		return win;
		
	}
	
	public void createUnshpmField(SGTable addTable){
		
		ListGridField FEE_TYPE = new ListGridField("FEE_TYPE", "费用类型", 90);
		ListGridField BELONG_MONTH = new ListGridField("BELONG_MONTH", "所属账期", 80);
		//ListGridField SUPLR_CNAME = new ListGridField("SUPLR_CNAME", "承运商", 100);
		ListGridField LOAD_NO = new ListGridField("LOAD_NO", "调度单号", 100);
		//ListGridField CUSTOM_ODR_NO = new ListGridField("CUSTOM_ODR_NO", "客户单号", 100);
		//ListGridField LOAD_DATE = new ListGridField("LOAD_DATE", "发货日期", 100);
		//ListGridField UNLOAD_DATE = new ListGridField("UNLOAD_DATE", "收货日期", 100);
		//ListGridField LOAD_NAME = new ListGridField("LOAD_NAME", "发货方", 120);
		//ListGridField UNLOAD_NAME = new ListGridField("UNLOAD_NAME", "收货方", 120);
		ListGridField PLATE_NO = new ListGridField("PLATE_NO", "车牌号", 80);
		ListGridField VEHICLE_TYPE = new ListGridField("VEHICLE_TYPE", "车型", 90);
		ListGridField AMOUNT = new ListGridField("AMOUNT", "应付金额（含税）", 100);
		ListGridField TYPE_NAME = new ListGridField("TYPE_NAME", "类型说明", 80);
		ListGridField DESCR = new ListGridField("DESCR", "备注", 180);
		
		addTable.setFields(FEE_TYPE,BELONG_MONTH,LOAD_NO,PLATE_NO,VEHICLE_TYPE,AMOUNT,TYPE_NAME,DESCR);
	}

	@Override
	public Canvas createCanvas(String id,TabSet tabSet) {
		PayInitBillView view = new PayInitBillView();
		view.setFUNCID(id);
		view.addMember(view.getViewPanel());
		return view;
	}

	@Override
	public String getCanvasID() {
		// TODO Auto-generated method stub
		return getID();
	}

}
